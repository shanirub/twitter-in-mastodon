import { AxiosRequestConfig, AxiosResponse } from 'axios';
import { MastoEvents } from './masto-events';
import 'isomorphic-form-data';
export interface GatewayConstructor {
    /** URI of the instance */
    uri: string;
    /** Streaming API URL */
    streamingApiUrl?: string;
    /** Version of the instance */
    version?: string;
    /** Access token of the user */
    accessToken?: string;
}
export declare type PaginateNextOptions<Params> = {
    /** Reset pagination */
    reset?: boolean;
    /** URL */
    url?: string;
    /** Query parameters */
    params?: Params;
};
/**
 * Mastodon network request wrapper
 * @param params Optional params
 */
export declare class Gateway {
    /** URI of the instance */
    private _uri;
    /** Streaming API URL of the instance */
    private _streamingApiUrl;
    /** Version of the current instance */
    version: string;
    /** API token of the user */
    accessToken?: string;
    /**
     * @param params Parameters
     */
    constructor(params: GatewayConstructor);
    uri: string;
    streamingApiUrl: string;
    /**
     * Transform JSON to JS object
     * @param response Response object
     * @return Parsed entitiy
     */
    private transformResponse;
    /**
     * Encode data in request options and add authorization / content-type header
     * @param data Any data
     * @param options Axios options
     */
    private decorateRequestConfig;
    /**
     * Wrapper function for Axios
     * @param options Axios options
     * @param parse Whether parse response before return
     * @return Parsed response object
     */
    protected request<T>(options: AxiosRequestConfig): Promise<AxiosResponse<T>>;
    /**
     * HTTP GET
     * @param url URL to request
     * @param params Query strings
     * @param options Fetch API options
     * @param parse Whether parse response before return
     */
    get<T>(path: string, params?: any, options?: AxiosRequestConfig): Promise<T>;
    /**
     * HTTP POST
     * @param url URL to request
     * @param data Payload
     * @param options Fetch API options
     * @param parse Whether parse response before return
     */
    post<T>(path: string, data?: any, options?: AxiosRequestConfig): Promise<T>;
    /**
     * HTTP PUT
     * @param path Path to request
     * @param data Payload
     * @param options Fetch API options
     * @param parse Whether parse response before return
     */
    put<T>(path: string, data?: any, options?: AxiosRequestConfig): Promise<T>;
    /**
     * HTTP DELETE
     * @param path Path to request
     * @param data jPayload
     * @param options Fetch API options
     * @param parse Whether parse response before return
     */
    delete<T>(path: string, data?: any, options?: AxiosRequestConfig): Promise<T>;
    /**
     * HTTP PATCH
     * @param path Path to request
     * @param data Payload
     * @param options Fetch API options
     * @param parse Whether parse response before return
     */
    patch<T>(path: string, data?: any, options?: AxiosRequestConfig): Promise<T>;
    /**
     * Connect to a streaming
     * @param path Path to stream
     * @param params Query parameters
     * @return Instance of EventEmitter
     */
    stream(path: string, params?: {
        [key: string]: any;
    }): Promise<MastoEvents>;
    /**
     * Generate an iterable of the pagination.
     * The default generator implementation of JS cannot change the value of `done` depend on the result of yield,
     * Therefore we define custom generator to reproduce Mastodon's link header behaviour faithfully.
     * @param path Path for the endpoint
     * @param initialParams Query parameter
     * @return Async iterable iterator of the pages.
     * See also [MDN article about generator/iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)
     */
    paginate<Data, Params = any>(path: string, initialParams?: Params): AsyncIterableIterator<Data | undefined>;
}
