/// <reference types="ws" />
import EventEmitter from 'eventemitter3';
import WebSocket from 'isomorphic-ws';
import { Conversation } from '../entities/conversation';
import { Notification } from '../entities/notification';
import { Status } from '../entities/status';
/** Callback argument of `ws` */
export interface Message {
    data: string;
    type: string;
    target: WebSocket;
}
export interface EventTypesMap {
    /** Status posted */
    update: Status;
    /** Status deleted */
    delete: Status['id'];
    /** User's notification */
    notification: Notification;
    /** User's filter changed */
    filters_changed: undefined;
    /** Status added to a conversation */
    conversation: Conversation;
}
export declare type EventTypes = keyof EventTypesMap;
/**
 * Mastodon streaming api wrapper
 */
export declare class MastoEvents extends EventEmitter {
    private ws?;
    /**
     * Connect to the websocket endpoint
     * @param url URL of the websocket endpoint
     * @param protocols Subprotocol(s) for `Sec-Websocket-Protocol`
     * @param params URL parameters
     */
    connect(url: string, protocols?: string | string[]): Promise<MastoEvents>;
    /**
     * Disconnect from the websocket endpoint
     */
    disconnect(): void;
    /**
     * Parse JSON data and emit it as an event
     * @param message Websocket message
     */
    handleMessage: (message: Message) => void;
    /**
     * Add listener for the event
     * @param event Type of the event. One of `update`, `delete`, `notification`, `filters_changed`, `conversation`
     * @param callback Callback function
     */
    on<T extends EventTypes>(event: T, callback: (payload: EventTypesMap[T]) => void): this;
}
