{"code":"import semver from 'semver';\r\nimport { MastoNotFoundError } from '../errors/masto-not-found-error';\r\n/**\r\n * Decorator that verifies the version of the Mastodon instance\r\n * @param parameters Optional params\r\n */\r\nexport var available = function (parameters) { return function (_target, name, descriptor) {\r\n    if (!descriptor || typeof descriptor.value !== 'function') {\r\n        throw new Error('available can only apply to a method of a class');\r\n    }\r\n    var original = descriptor.value;\r\n    var since = parameters.since, until = parameters.until;\r\n    descriptor.value = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        var version = semver.coerce(this.gateway.version);\r\n        if (since && version && semver.lt(version, since)) {\r\n            throw new MastoNotFoundError(name + \" is not available with the current \" +\r\n                (\"Mastodon version \" + version + \". \") +\r\n                (\"It requires greater than or equal to version \" + since + \".\"));\r\n        }\r\n        if (until && version && semver.gt(version, until)) {\r\n            throw new MastoNotFoundError(name + \" is not available with the current \" +\r\n                (\"Mastodon version \" + version + \". \") +\r\n                (\"It was removed on version \" + until + \".\"));\r\n        }\r\n        return original.apply(this, args);\r\n    };\r\n}; };\r\n","references":["/Users/nucx/.ghq/github.com/neet/masto.js/node_modules/@types/semver/index.d.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/errors/masto-not-found-error.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/client/masto.ts"],"dts":{"name":"/Users/nucx/.ghq/github.com/neet/masto.js/client/decorators.d.ts","writeByteOrderMark":false,"text":"import { Masto } from './masto';\r\nexport declare type Decorator = (masto: Masto, name: string, descriptor: TypedPropertyDescriptor<(...args: any[]) => any>) => void;\r\nexport interface AvailabeParams {\r\n    since?: string;\r\n    until?: string;\r\n}\r\n/**\r\n * Decorator that verifies the version of the Mastodon instance\r\n * @param parameters Optional params\r\n */\r\nexport declare const available: (parameters: AvailabeParams) => Decorator;\r\n"}}
