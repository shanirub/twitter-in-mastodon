{"code":"import { gt, lt } from 'semver';\r\nimport { MastoNotFoundError } from '../errors/masto-not-found-error';\r\nimport { MastoUnauthorizedError } from '../errors/masto-unauthorized-error';\r\n/**\r\n * Decorator that indicates the function requires user\r\n * (placeholder for the future implementation)\r\n */\r\nexport var requiresUser = function (_target, _name, descriptor) {\r\n    if (!descriptor || typeof descriptor.value !== 'function') {\r\n        throw new Error('requiresUser only can be used to a method of a class');\r\n    }\r\n    var original = descriptor.value;\r\n    descriptor.value = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return original.apply(this, args);\r\n    };\r\n};\r\n/**\r\n * Decorator that indicates the function requires authentication\r\n */\r\nexport var requiresAuthentication = function (_target, name, descriptor) {\r\n    if (!descriptor || typeof descriptor.value !== 'function') {\r\n        throw new Error('requireAuthentication only can be used to a method of a class');\r\n    }\r\n    var original = descriptor.value;\r\n    descriptor.value = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (!this.accessToken) {\r\n            throw new MastoUnauthorizedError(\"Endpoint \" + name + \" requires authentication. \" +\r\n                'Check Setting > Development of your Mastodon instance ' +\r\n                'to register application.');\r\n        }\r\n        return original.apply(this, args);\r\n    };\r\n};\r\n/**\r\n * Decorator that verifies the version of the Mastodon instance\r\n * @param parameters Optional params\r\n */\r\nexport var available = function (parameters) { return function (_target, name, descriptor) {\r\n    if (!descriptor || typeof descriptor.value !== 'function') {\r\n        throw new Error('available only can be used to a method of a class');\r\n    }\r\n    var original = descriptor.value;\r\n    var since = parameters.since, until = parameters.until;\r\n    descriptor.value = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (since && this.version && lt(this.version, since)) {\r\n            throw new MastoNotFoundError(name + \" is not available with the current \" +\r\n                (\"Mastodon version \" + this.version + \". \") +\r\n                (\"It requires greater than or equal to version \" + since + \".\"));\r\n        }\r\n        if (until && this.version && gt(this.version, until)) {\r\n            throw new MastoNotFoundError(name + \" is not available with the current \" +\r\n                (\"Mastodon version \" + this.version + \". \") +\r\n                (\"It was removed on version \" + until + \".\"));\r\n        }\r\n        return original.apply(this, args);\r\n    };\r\n}; };\r\n","dts":{"name":"/Users/nucx/Developments/masto.js/client/decorators.d.ts","writeByteOrderMark":false,"text":"import { Masto } from './masto';\r\nexport declare type Decorator = (masto: Masto, name: string, descriptor: TypedPropertyDescriptor<(...args: any[]) => any>) => void;\r\nexport interface AvailabeParams {\r\n    since?: string;\r\n    until?: string;\r\n}\r\n/**\r\n * Decorator that indicates the function requires user\r\n * (placeholder for the future implementation)\r\n */\r\nexport declare const requiresUser: Decorator;\r\n/**\r\n * Decorator that indicates the function requires authentication\r\n */\r\nexport declare const requiresAuthentication: Decorator;\r\n/**\r\n * Decorator that verifies the version of the Mastodon instance\r\n * @param parameters Optional params\r\n */\r\nexport declare const available: (parameters: AvailabeParams) => Decorator;\r\n"}}
