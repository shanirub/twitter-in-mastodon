{"code":"import * as tslib_1 from \"tslib\";\r\nimport { available } from './decorators';\r\nimport { Gateway } from './gateway';\r\n/**\r\n * Mastodon API client\r\n */\r\nvar Masto = /** @class */ (function () {\r\n    /**\r\n     * Private constructor\r\n     * @param gateway Instance of Gateway\r\n     */\r\n    function Masto(gateway) {\r\n        this.gateway = gateway;\r\n    }\r\n    /**\r\n     * Login to Mastodon\r\n     * @param params Paramters\r\n     * @return Instance of Mastodon class\r\n     */\r\n    Masto.login = function (params) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var gateway, masto, instance;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        gateway = new Gateway(params);\r\n                        masto = new Masto(gateway);\r\n                        return [4 /*yield*/, masto.fetchInstance()];\r\n                    case 1:\r\n                        instance = _a.sent();\r\n                        gateway.version = instance.version;\r\n                        gateway.streamingApiUrl = instance.urls.streaming_api;\r\n                        return [2 /*return*/, masto];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Starting home timeline and notification streaming\r\n     * @return Instance of EventEmitter\r\n     * @see https://docs.joinmastodon.org/api/streaming/#get-api-v1-streaming-user\r\n     */\r\n    Masto.prototype.streamUser = function () {\r\n        return this.gateway.stream('/api/v1/streaming', {\r\n            stream: 'user',\r\n        });\r\n    };\r\n    /**\r\n     * Starting federated timeline streaming\r\n     * @return Instance of EventEmitter\r\n     * @see https://docs.joinmastodon.org/api/streaming/#get-api-v1-streaming-public\r\n     */\r\n    Masto.prototype.streamPublicTimeline = function () {\r\n        return this.gateway.stream('/api/v1/streaming', {\r\n            stream: 'public',\r\n        });\r\n    };\r\n    /**\r\n     * Starting local timeline streaming\r\n     * @return Instance of EventEmitter\r\n     * @see https://docs.joinmastodon.org/api/streaming/#get-api-v1-streaming-public-local\r\n     */\r\n    Masto.prototype.streamCommunityTimeline = function () {\r\n        return this.gateway.stream('/api/v1/streaming', {\r\n            stream: 'public:local',\r\n        });\r\n    };\r\n    /**\r\n     * Starting tag timeline streaming\r\n     * @param id ID of the tag\r\n     * @return Instance of EventEmitter\r\n     * @see https://docs.joinmastodon.org/api/streaming/#get-api-v1-streaming-hashtag-tag-hashtag\r\n     */\r\n    Masto.prototype.streamTagTimeline = function (id) {\r\n        return this.gateway.stream('/api/v1/streaming', {\r\n            stream: 'hashtag',\r\n            tag: id,\r\n        });\r\n    };\r\n    /**\r\n     * Starting local tag timeline streaming\r\n     * @param id ID of the tag\r\n     * @return Instance of EventEmitter\r\n     * @see https://docs.joinmastodon.org/api/streaming/#get-api-v1-streaming-hashtag-local-tag-hashtag\r\n     */\r\n    Masto.prototype.streamLocalTagTimeline = function (id) {\r\n        return this.gateway.stream('/api/v1/streaming', {\r\n            stream: 'hashtag:local',\r\n            tag: id,\r\n        });\r\n    };\r\n    /**\r\n     * Starting list timeline streaming\r\n     * @param id ID of the list\r\n     * @return Instance of EventEmitter\r\n     * @see https://docs.joinmastodon.org/api/streaming/#get-api-v1-streaming-list-list-list-id\r\n     */\r\n    Masto.prototype.streamListTimeline = function (id) {\r\n        return this.gateway.stream('/api/v1/streaming', {\r\n            stream: 'list',\r\n            list: id,\r\n        });\r\n    };\r\n    /**\r\n     * Starting direct timeline streaming\r\n     * @return Instance of EventEmitter\r\n     * @see https://docs.joinmastodon.org/api/streaming/#get-api-v1-streaming-direct\r\n     */\r\n    Masto.prototype.streamDirectTimeline = function () {\r\n        return this.gateway.stream('/api/v1/streaming', {\r\n            stream: 'direct',\r\n        });\r\n    };\r\n    /**\r\n     * Fetch access token from authorization code\r\n     * @param params Parameters\r\n     * @return OauthToken\r\n     * @see https://docs.joinmastodon.org/api/authentication/#post-oauth-token\r\n     */\r\n    Masto.prototype.fetchAccessToken = function (params) {\r\n        return this.gateway.post('/oauth/token', params);\r\n    };\r\n    /**\r\n     * Revoke access token parmanently\r\n     * @param params Client credentials\r\n     * @see https://docs.joinmastodon.org/api/authentication/#post-oauth-revoke\r\n     */\r\n    Masto.prototype.revokeAccessToken = function (params) {\r\n        return this.gateway.post('/oauth/revoke', params);\r\n    };\r\n    /**\r\n     * Fetching an account\r\n     * @param id ID of the account\r\n     * @return Returns Account\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#get-api-v1-accounts-id\r\n     */\r\n    Masto.prototype.fetchAccount = function (id) {\r\n        return this.gateway.get(\"/api/v1/accounts/\" + id);\r\n    };\r\n    /**\r\n     * Create an account with given profile\r\n     * @param params Data of the user to create\r\n     * @return Access token\r\n     */\r\n    Masto.prototype.createAccount = function (params) {\r\n        return this.gateway.post('/api/v1/accounts', params);\r\n    };\r\n    /**\r\n     * User’s own account.\r\n     * @return Returns Account with an extra source attribute.\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#get-api-v1-accounts-verify-credentials\r\n     */\r\n    Masto.prototype.verifyCredentials = function () {\r\n        return this.gateway.get('/api/v1/accounts/verify_credentials');\r\n    };\r\n    /**\r\n     * Update user’s own account.\r\n     * @param params Form data\r\n     * @return Returns Account\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#patch-api-v1-accounts-update-credentials\r\n     */\r\n    Masto.prototype.updateCredentials = function (params) {\r\n        return this.gateway.patch('/api/v1/accounts/update_credentials', params, { headers: { 'Content-Type': 'multipart/form-data' } });\r\n    };\r\n    /**\r\n     * Accounts which follow the given account.\r\n     * @param id ID of the target account\r\n     * @param params Query parameters\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#get-api-v1-accounts-id-followers\r\n     */\r\n    Masto.prototype.fetchAccountFollowers = function (id, params) {\r\n        return this.gateway.paginate(\"/api/v1/accounts/\" + id + \"/followers\", params);\r\n    };\r\n    /**\r\n     * Accounts which the given account is following.\r\n     * @param id ID of the target account\r\n     * @param params Query parameter\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#get-api-v1-accounts-id-following\r\n     */\r\n    Masto.prototype.fetchAccountFollowing = function (id, params) {\r\n        return this.gateway.paginate(\"/api/v1/accounts/\" + id + \"/following\", params);\r\n    };\r\n    /**\r\n     * An account’s statuses.\r\n     * @param id ID of the target account\r\n     * @param params Query parameter\r\n     * @return Returns array of Status\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#get-api-v1-accounts-id-statuses\r\n     */\r\n    Masto.prototype.fetchAccountStatuses = function (id, params) {\r\n        return this.gateway.paginate(\"/api/v1/accounts/\" + id + \"/statuses\", params);\r\n    };\r\n    /**\r\n     * Follow an account by id\r\n     * @param id ID of the target account\r\n     * @param params Options\r\n     * @return Returns Relationship\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#post-api-v1-accounts-id-follow\r\n     */\r\n    Masto.prototype.followAccount = function (id, params) {\r\n        return this.gateway.post(\"/api/v1/accounts/\" + id + \"/follow\", params);\r\n    };\r\n    /**\r\n     * Unfollow an account by id\r\n     * @param id ID of the target account\r\n     * @return Returns Relationship\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#post-api-v1-accounts-id-unfollow\r\n     */\r\n    Masto.prototype.unfollowAccount = function (id) {\r\n        return this.gateway.post(\"/api/v1/accounts/\" + id + \"/unfollow\");\r\n    };\r\n    /**\r\n     * Relationship of the user to the given accounts in regards to following, blocking, muting, etc.\r\n     * @param id Array of account IDs\r\n     * @return Returns array of Relationship\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#get-api-v1-accounts-relationships\r\n     */\r\n    Masto.prototype.fetchAccountRelationships = function (id) {\r\n        return this.gateway.get(\"/api/v1/accounts/relationship\", {\r\n            id: id,\r\n        });\r\n    };\r\n    /**\r\n     * Search for matching accounts by username, domain and display name.\r\n     * @param params Query parameter\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#get-api-v1-accounts-search\r\n     */\r\n    Masto.prototype.searchAccounts = function (params) {\r\n        return this.gateway.get(\"/api/v1/accounts/search\", params);\r\n    };\r\n    /**\r\n     * Create a new application to obtain OAuth2 credentials.\r\n     * @param params Parameters\r\n     * @return Returns App with client_id and client_secret\r\n     * @see https://docs.joinmastodon.org/api/rest/apps/#post-api-v1-apps\r\n     */\r\n    Masto.prototype.createApp = function (params) {\r\n        return this.gateway.post(\"/api/v1/apps\", params);\r\n    };\r\n    /**\r\n     * Confirm that the app’s OAuth2 credentials work.\r\n     * @return Returns App\r\n     * @see https://docs.joinmastodon.org/api/rest/apps/#get-api-v1-apps-verify-credentials\r\n     */\r\n    Masto.prototype.verifyAppCredentials = function () {\r\n        return this.gateway.get(\"/api/v1/apps/verify_credentials\");\r\n    };\r\n    /**\r\n     * Accounts the user has blocked.\r\n     * @param params Query parameter\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/blocks/#get-api-v1-blocks\r\n     */\r\n    Masto.prototype.fetchBlocks = function (params) {\r\n        return this.gateway.paginate(\"/api/v1/blocks\", params);\r\n    };\r\n    /**\r\n     * Block an account with id\r\n     * @param id ID of the target account\r\n     * @return Returns Relationship\r\n     * @see https://docs.joinmastodon.org/api/rest/blocks/#post-api-v1-accounts-id-block\r\n     */\r\n    Masto.prototype.blockAccount = function (id) {\r\n        return this.gateway.post(\"/api/v1/accounts/\" + id + \"/block\");\r\n    };\r\n    /**\r\n     * Unblock an account with id\r\n     * @param id ID of the target account\r\n     * @return Returns Relationship\r\n     * @see https://docs.joinmastodon.org/api/rest/blocks/#post-api-v1-accounts-id-unblock\r\n     */\r\n    Masto.prototype.unblockAccount = function (id) {\r\n        return this.gateway.post(\"/api/v1/accounts/\" + id + \"/unblock\");\r\n    };\r\n    /**\r\n     * Custom emojis that are available on the server.\r\n     * @return Returns array of Emoji\r\n     * @see https://docs.joinmastodon.org/api/rest/custom-emojis/#get-api-v1-custom-emojis\r\n     */\r\n    Masto.prototype.fetchCustomEmojis = function () {\r\n        return this.gateway.get(\"/api/v1/custom_emojis\");\r\n    };\r\n    /**\r\n     * Domains the user has blocked.\r\n     * @param params Query parameter\r\n     * @return Returns array of string.\r\n     * @see https://docs.joinmastodon.org/api/rest/domain-blocks/#get-api-v1-domain-blocks\r\n     */\r\n    Masto.prototype.fetchDomainBlocks = function (params) {\r\n        return this.gateway.paginate(\"/api/v1/domain_blocks\", params);\r\n    };\r\n    /**\r\n     * Block a domain to hide all public posts from it, all notifications from it, and remove all followers from it.\r\n     * @param domain Domain to block\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/domain-blocks/#post-api-v1-domain-blocks\r\n     */\r\n    Masto.prototype.blockDomain = function (domain) {\r\n        return this.gateway.post(\"/api/v1/domain_blocks\", {\r\n            domain: domain,\r\n        });\r\n    };\r\n    /**\r\n     * Remove a domain block.\r\n     * @param domain Domain to unblock\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/domain-blocks/#delete-api-v1-domain-blocks\r\n     */\r\n    Masto.prototype.unblockDomain = function (domain) {\r\n        return this.gateway.delete(\"/api/v1/domain_blocks\", {\r\n            domain: domain,\r\n        });\r\n    };\r\n    /**\r\n     * Accounts the user chose to endorse.\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/endorsements/#get-api-v1-endorsements\r\n     */\r\n    Masto.prototype.fetchEndorsements = function (params) {\r\n        return this.gateway.paginate(\"/api/v1/endorsements\", params);\r\n    };\r\n    /**\r\n     * Endorse an account, i.e. choose to feature the account on the user’s public profile.\r\n     * @param id ID of the target account\r\n     * @return Returns Relationship\r\n     * @see https://docs.joinmastodon.org/api/rest/endorsements/#post-api-v1-accounts-id-pin\r\n     */\r\n    Masto.prototype.pinAccount = function (id) {\r\n        return this.gateway.post(\"/api/v1/accounts/\" + id + \"/pin\");\r\n    };\r\n    /**\r\n     * Unpin an account with id\r\n     * @param id ID of the target account\r\n     * @return Returns Relationship\r\n     * @see https://docs.joinmastodon.org/api/rest/endorsements/#post-api-v1-accounts-id-unpin\r\n     */\r\n    Masto.prototype.unpinAccount = function (id) {\r\n        return this.gateway.post(\"/api/v1/accounts/\" + id + \"/unpin\");\r\n    };\r\n    /**\r\n     * Statuses the user has favourited.\r\n     * @param params Query parameter\r\n     * @return Returns array of Status\r\n     * @see https://docs.joinmastodon.org/api/rest/favourites/#get-api-v1-favourites\r\n     */\r\n    Masto.prototype.fetchFavourites = function (params) {\r\n        return this.gateway.paginate(\"/api/v1/favourites\", params);\r\n    };\r\n    /**\r\n     * Favourite a status with id\r\n     * @param id ID of the target status\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/favourites/#post-api-v1-statuses-id-favourite\r\n     */\r\n    Masto.prototype.favouriteStatus = function (id) {\r\n        return this.gateway.post(\"/api/v1/statuses/\" + id + \"/favourite\");\r\n    };\r\n    /**\r\n     * Undo the favourite of a status.\r\n     * @param id ID of the target status\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/favourites/#post-api-v1-statuses-id-unfavourite\r\n     */\r\n    Masto.prototype.unfavouriteStatus = function (id) {\r\n        return this.gateway.post(\"/api/v1/statuses/\" + id + \"/unfavourite\");\r\n    };\r\n    /**\r\n     * Text filters the user has configured that potentially must be applied client-side.\r\n     * @return An array of Filters\r\n     * @see https://docs.joinmastodon.org/api/rest/filters/#get-api-v1-filters\r\n     */\r\n    Masto.prototype.fetchFilters = function () {\r\n        return this.gateway.get(\"/api/v1/filters\");\r\n    };\r\n    /**\r\n     * A text filter.\r\n     * @param id ID of the filter\r\n     * @return Returns Filter\r\n     * @see https://docs.joinmastodon.org/api/rest/filters/#get-api-v1-filters-id\r\n     */\r\n    Masto.prototype.fetchFilter = function (id) {\r\n        return this.gateway.get(\"/api/v1/filters/\" + id);\r\n    };\r\n    /**\r\n     * Create a new filter.\r\n     * @param params Parameters\r\n     * @return Returns Filter\r\n     * @see https://docs.joinmastodon.org/api/rest/filters/#post-api-v1-filters\r\n     */\r\n    Masto.prototype.createFiler = function (params) {\r\n        return this.gateway.post(\"/api/v1/filters\", params);\r\n    };\r\n    /**\r\n     * Update a text filter.\r\n     * @param id ID of the filter\r\n     * @param params Optinal parameter\r\n     * @return Returns Filter\r\n     * @see https://docs.joinmastodon.org/api/rest/filters/#put-api-v1-filters-id\r\n     */\r\n    Masto.prototype.updateFilter = function (id, params) {\r\n        return this.gateway.put(\"/api/v1/filters/\" + id, params);\r\n    };\r\n    /**\r\n     * Delete a text filter.\r\n     * @param id ID of the filter\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/filters/#delete-api-v1-filters-id\r\n     */\r\n    Masto.prototype.removeFilter = function (id) {\r\n        return this.gateway.delete(\"/api/v1/filters/\" + id);\r\n    };\r\n    /**\r\n     * Accounts that have requested to follow the user.\r\n     * @param params Query parameter\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/follow-requests/#get-api-v1-follow-requests\r\n     */\r\n    Masto.prototype.fetchFollowRequests = function (params) {\r\n        return this.gateway.paginate(\"/api/v1/follow_requests\", params);\r\n    };\r\n    /**\r\n     * Allow the account to follow the user.\r\n     * @param id ID of the target account\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/follow-requests/#post-api-v1-follow-requests-id-authorize\r\n     */\r\n    Masto.prototype.authorizeFollowRequest = function (id) {\r\n        return this.gateway.post(\"/api/v1/follow_requests/\" + id + \"/authorize\");\r\n    };\r\n    /**\r\n     * Do not allow the account to follow the user.\r\n     * @param id ID of the target account\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/follow-requests/#post-api-v1-follow-requests-id-reject\r\n     */\r\n    Masto.prototype.rejectFollowRequest = function (id) {\r\n        return this.gateway.post(\"/api/v1/follow_requests/\" + id + \"/reject\");\r\n    };\r\n    /**\r\n     * Accounts the user had past positive interactions with, but is not following yet.\r\n     * @return An array of Accounts\r\n     * @see https://docs.joinmastodon.org/api/rest/follow-suggestions/#get-api-v1-suggestions\r\n     */\r\n    Masto.prototype.fetchSuggestions = function () {\r\n        return this.gateway.get('/api/v1/suggestions');\r\n    };\r\n    /**\r\n     * Remove account from suggestions.\r\n     * @param id ID of the target account\r\n     * @return An array of Accounts\r\n     * @see https://docs.joinmastodon.org/api/rest/follow-suggestions/#delete-api-v1-suggestions-account-id\r\n     */\r\n    Masto.prototype.removeSuggestion = function (id) {\r\n        return this.gateway.delete(\"/api/v1/suggestions/\" + id);\r\n    };\r\n    /**\r\n     * Information about the server.\r\n     * @return Returns Instance\r\n     * @see https://docs.joinmastodon.org/api/rest/instances/#get-api-v1-instance\r\n     */\r\n    Masto.prototype.fetchInstance = function () {\r\n        return this.gateway.get('/api/v1/instance');\r\n    };\r\n    /**\r\n     * Fetching instance's peers\r\n     * @return An array of peer instance's domain\r\n     * @see https://github.com/tootsuite/mastodon/pull/6125\r\n     */\r\n    Masto.prototype.fetchInstancesPeers = function () {\r\n        return this.gateway.get('/api/v1/instance/peers');\r\n    };\r\n    /**\r\n     * Fetching activities of current instance\r\n     * @return An array of InstanceActivity\r\n     * @see https://github.com/tootsuite/mastodon/pull/6125\r\n     */\r\n    Masto.prototype.fetchInstanceActivity = function () {\r\n        return this.gateway.get('/api/v1/instance/activity');\r\n    };\r\n    /**\r\n     * User’s lists.\r\n     * @return Returns array of List\r\n     * @see https://docs.joinmastodon.org/api/rest/lists/#get-api-v1-lists\r\n     */\r\n    Masto.prototype.fetchLists = function () {\r\n        return this.gateway.get('/api/v1/lists');\r\n    };\r\n    /**\r\n     * User’s lists that a given account is part of.\r\n     * @param id ID of the target list\r\n     * @return Returns array of List\r\n     * @see https://docs.joinmastodon.org/api/rest/lists/#get-api-v1-accounts-id-lists\r\n     */\r\n    Masto.prototype.fetchAccountLists = function (id) {\r\n        return this.gateway.get(\"/api/v1/accounts/\" + id + \"/lists\");\r\n    };\r\n    /**\r\n     * Accounts that are in a given list.\r\n     * @param id ID of the target list\r\n     * @param params Optional params\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/lists/#get-api-v1-lists-id-accounts\r\n     */\r\n    Masto.prototype.fetchListAccounts = function (id, params) {\r\n        return this.gateway.paginate(\"/api/v1/list/\" + id + \"/accounts\", params);\r\n    };\r\n    /**\r\n     * Fetch a list with id\r\n     * @param id ID of the targtet list\r\n     * @return Returns List\r\n     * @see https://docs.joinmastodon.org/api/rest/lists/#get-api-v1-lists-id\r\n     */\r\n    Masto.prototype.fetchList = function (id) {\r\n        return this.gateway.get(\"/api/v1/lists/\" + id);\r\n    };\r\n    /**\r\n     * Create a new list.\r\n     * @param params Options\r\n     * @return Returns List\r\n     * @see https://docs.joinmastodon.org/api/rest/lists/#post-api-v1-lists\r\n     */\r\n    Masto.prototype.createList = function (params) {\r\n        return this.gateway.post('/api/v1/lists', params);\r\n    };\r\n    /**\r\n     * Update a list with title and id\r\n     * @param id ID of the target list\r\n     * @param params Options\r\n     * @return Returns List\r\n     * @see https://docs.joinmastodon.org/api/rest/lists/#put-api-v1-lists-id\r\n     */\r\n    Masto.prototype.updateList = function (id, params) {\r\n        return this.gateway.put(\"/api/v1/lists/\" + id, params);\r\n    };\r\n    /**\r\n     * Remove a list with id\r\n     * @param id ID of the target list\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/lists/#delete-api-v1-lists-id\r\n     */\r\n    Masto.prototype.removeList = function (id) {\r\n        return this.gateway.delete(\"/api/v1/lists/\" + id);\r\n    };\r\n    /**\r\n     * Add accounts to a list.\r\n     * @param id ID of the target list\r\n     * @param params Parameter\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/lists/#post-api-v1-lists-id-accounts\r\n     */\r\n    Masto.prototype.addAccountToList = function (id, params) {\r\n        return this.gateway.post(\"/api/v1/lists/\" + id + \"/accounts\", params);\r\n    };\r\n    /**\r\n     * Remove accounts from a list.\r\n     * @param id ID of the target list\r\n     * @param params Parameter\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/lists/#delete-api-v1-lists-id-accounts\r\n     */\r\n    Masto.prototype.removeAccountFromList = function (id, params) {\r\n        return this.gateway.delete(\"/api/v1/lists/\" + id + \"/accounts\", params);\r\n    };\r\n    /**\r\n     * Upload a media attachment that can be used with a new status.\r\n     * @param params Form data\r\n     * @return Returns Attachment\r\n     * @see https://docs.joinmastodon.org/api/rest/media/#post-api-v1-media\r\n     */\r\n    Masto.prototype.uploadMediaAttachment = function (params) {\r\n        return this.gateway.post('/api/v1/media', params, {\r\n            headers: { 'Content-Type': 'multipart/form-data' },\r\n        });\r\n    };\r\n    /**\r\n     * Update a media attachment. Can only be done before the media is attached to a status.\r\n     * @param id ID of the target attachment\r\n     * @param params Form data\r\n     * @return Returns Returns Attachment\r\n     * @see https://docs.joinmastodon.org/api/rest/media/#put-api-v1-media-id\r\n     */\r\n    Masto.prototype.updateMediaAttachment = function (id, params) {\r\n        return this.gateway.put(\"/api/v1/media/\" + id, params);\r\n    };\r\n    /**\r\n     * Accounts the user has muted.\r\n     * @param params Query parameter\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/mutes/#get-api-v1-mutes\r\n     */\r\n    Masto.prototype.fetchMutes = function (params) {\r\n        return this.gateway.paginate('/api/v1/mutes', params);\r\n    };\r\n    /**\r\n     * Mute an account with id\r\n     * @param id ID of the target account\r\n     * @param params Options\r\n     * @return Returns Relationship\r\n     * @see https://docs.joinmastodon.org/api/rest/mutes/#post-api-v1-accounts-id-mute\r\n     */\r\n    Masto.prototype.muteAccount = function (id, params) {\r\n        return this.gateway.post(\"/api/v1/accounts/\" + id + \"/mute\", params);\r\n    };\r\n    /**\r\n     * Unmute an account with id\r\n     * @param id ID of the target account\r\n     * @return Returns Relationship\r\n     * @see https://docs.joinmastodon.org/api/rest/mutes/#post-api-v1-accounts-id-unmute\r\n     */\r\n    Masto.prototype.unmuteAccount = function (id) {\r\n        return this.gateway.post(\"/api/v1/accounts/\" + id + \"/unmute\");\r\n    };\r\n    /**\r\n     * Mute the conversation the status is part of, to no longer be notified about it.\r\n     * @param id ID of the target account\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/mutes/#post-api-v1-status-id-mute\r\n     */\r\n    Masto.prototype.muteStatus = function (id) {\r\n        return this.gateway.post(\"/api/v1/statuses/\" + id + \"/mute\");\r\n    };\r\n    /**\r\n     * Unmute the conversation the status is part of.\r\n     * @param id ID of the target account\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/mutes/#post-api-v1-status-id-unmute\r\n     */\r\n    Masto.prototype.unmuteStatus = function (id) {\r\n        return this.gateway.post(\"/api/v1/statuses/\" + id + \"/unmute\");\r\n    };\r\n    /**\r\n     * Notifications concerning the user.\r\n     * @param params Query parameter\r\n     * @return Returns array of Notification\r\n     * @see https://docs.joinmastodon.org/api/rest/notifications/#get-api-v1-notifications\r\n     */\r\n    Masto.prototype.fetchNotifications = function (params) {\r\n        return this.gateway.get('/api/v1/notifications', params);\r\n    };\r\n    /**\r\n     * Getting a single notification\r\n     * @param id Notification ID\r\n     * @return Returns Notification\r\n     * @see https://docs.joinmastodon.org/api/rest/notifications/#get-api-v1-notifications-id\r\n     */\r\n    Masto.prototype.fetchNotification = function (id) {\r\n        return this.gateway.get(\"/api/v1/notifications/\" + id);\r\n    };\r\n    /**\r\n     * Delete all notifications from the server.\r\n     * @return Returns an empty object.\r\n     * @see https://docs.joinmastodon.org/api/rest/notifications/#post-api-v1-notifications-clear\r\n     */\r\n    Masto.prototype.clearNotifications = function () {\r\n        return this.gateway.post('/api/v1/notifications/clear');\r\n    };\r\n    /**\r\n     * Delete a single notification from the server.\r\n     * @param id Notification ID\r\n     * @return Returns an empty object.\r\n     * @see https://docs.joinmastodon.org/api/rest/notifications/#post-api-v1-notifications-dismiss\r\n     */\r\n    Masto.prototype.dissmissNotification = function (id) {\r\n        return this.gateway.post('/api/v1/notifications/dismiss', {\r\n            id: id,\r\n        });\r\n    };\r\n    /**\r\n     * Add a Web Push API subscription to receive notifications. See also: Web Push API\r\n     * @param params Form data\r\n     * @return Returns Push Subscription\r\n     * @see https://docs.joinmastodon.org/api/rest/notifications/#put-api-v1-push-subscription\r\n     */\r\n    Masto.prototype.addPushSubscription = function (params) {\r\n        return this.gateway.post('/api/v1/push/subscription', params);\r\n    };\r\n    /**\r\n     * Fetch Push Subscription for notifications\r\n     * @return Returns Push Subscription\r\n     * @see https://docs.joinmastodon.org/api/rest/notifications/#get-api-v1-push-subscription\r\n     */\r\n    Masto.prototype.fetchPushSubscription = function () {\r\n        return this.gateway.get('/api/v1/push/subscription');\r\n    };\r\n    /**\r\n     * Update current Web Push API subscription. Only the `data` part can be updated, e.g. which types of notifications are desired. To change fundamentals, a new subscription must be created instead.\r\n     * @param params Form data\r\n     * @return Returns Push Subscription\r\n     * @see https://docs.joinmastodon.org/api/rest/notifications/#put-api-v1-push-subscription\r\n     */\r\n    Masto.prototype.updatePushSubscription = function (params) {\r\n        return this.gateway.put('/api/v1/push/subscription', params);\r\n    };\r\n    /**\r\n     * Remove the current Web Push API subscription.\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/notifications/#delete-api-v1-push-subscription\r\n     */\r\n    Masto.prototype.removePushSubscription = function () {\r\n        return this.gateway.delete('/api/v1/push/subscription');\r\n    };\r\n    /**\r\n     * Fetch poll by its ID\r\n     * @param id ID of the poll\r\n     * @return Poll\r\n     * @see https://docs.joinmastodon.org/api/rest/polls/#get-api-v1-polls-id\r\n     */\r\n    Masto.prototype.fetchPoll = function (id) {\r\n        return this.gateway.get(\"/api/v1/polls/\" + id);\r\n    };\r\n    /**\r\n     * Vote on a poll\r\n     * @param id ID of the poll\r\n     * @param options Options\r\n     * @return Poll\r\n     * @see https://docs.joinmastodon.org/api/rest/polls/#post-api-v1-polls-id-votes\r\n     */\r\n    Masto.prototype.votePoll = function (id, params) {\r\n        return this.gateway.post(\"/api/v1/polls/\" + id + \"/votes\", params);\r\n    };\r\n    /**\r\n     * Report an account to moderators/administrators\r\n     * @param params Parameters\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/reports/#post-api-v1-reports\r\n     */\r\n    Masto.prototype.reportAccount = function (params) {\r\n        return this.gateway.post('/api/v1/reports', params);\r\n    };\r\n    /**\r\n     * Get scheduled statuses\r\n     * @return An array of ScheduledStatus\r\n     * @see https://docs.joinmastodon.org/api/rest/scheduled-statuses/#get-api-v1-scheduled-statuses\r\n     */\r\n    Masto.prototype.fetchScheduledStatuses = function () {\r\n        return this.gateway.get('/api/v1/scheduled_statuses');\r\n    };\r\n    /**\r\n     * Get scheduled status\r\n     * @param id ID of the scheduled status\r\n     * @return ScheduledStatus\r\n     * @see https://docs.joinmastodon.org/api/rest/scheduled-statuses/#get-api-v1-scheduled-statuses-id\r\n     */\r\n    Masto.prototype.fetchScheduledStatus = function (id) {\r\n        return this.gateway.get(\"/api/v1/scheduled_statuses/\" + id);\r\n    };\r\n    /**\r\n     * Update Scheduled status. Only `scheduled_at` can be changed. To change the content, delete it and post a new status.\r\n     * @param id ID of the scheduled status\r\n     * @param params Parameters\r\n     * @return ScheduledStatus\r\n     * @see https://docs.joinmastodon.org/api/rest/scheduled-statuses/#put-api-v1-scheduled-statuses-id\r\n     */\r\n    Masto.prototype.updateScheduledStatus = function (id, params) {\r\n        return this.gateway.put(\"/api/v1/scheduled_statuses/\" + id, params);\r\n    };\r\n    /**\r\n     * Remove scheduled status\r\n     * @param id ID of the status\r\n     * @return Nothing\r\n     * @see https://docs.joinmastodon.org/api/rest/scheduled-statuses/#delete-api-v1-scheduled-statuses-id\r\n     */\r\n    Masto.prototype.removeScheduledStatus = function (id) {\r\n        return this.gateway.delete(\"/api/v1/scheduled_statuses/\" + id);\r\n    };\r\n    /**\r\n     * Search for content in accounts, statuses and hashtags.\r\n     * @param params Parameters\r\n     * @param version Version of Mastodon API (default: `'v2'`)\r\n     * @return Returns Results\r\n     * @see https://docs.joinmastodon.org/api/rest/search/#get-api-v2-search\r\n     */\r\n    Masto.prototype.search = function (params, version) {\r\n        if (version === void 0) { version = 'v2'; }\r\n        return this.gateway.paginate(\"/api/\" + version + \"/search\", params);\r\n    };\r\n    /**\r\n     * Fetch a status with id\r\n     * @param id ID of the target status\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#get-api-v1-statuses-id\r\n     */\r\n    Masto.prototype.fetchStatus = function (id) {\r\n        return this.gateway.get(\"/api/v1/statuses/\" + id);\r\n    };\r\n    /**\r\n     * What the status replies to, and replies to it.\r\n     * @param id ID of the target status\r\n     * @return Returns Context\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#get-api-v1-statuses-id-context\r\n     */\r\n    Masto.prototype.fetchStatusContext = function (id) {\r\n        return this.gateway.get(\"/api/v1/statuses/\" + id + \"/context\");\r\n    };\r\n    /**\r\n     * Link preview card for a status, if available.\r\n     * @return Returns Card\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#get-api-v1-statuses-id-card\r\n     */\r\n    Masto.prototype.fetchStatusCard = function (id) {\r\n        return this.gateway.get(\"/api/v1/statuses/\" + id + \"/card\");\r\n    };\r\n    /**\r\n     * Accounts that reblogged the status.\r\n     * @param id ID of target status\r\n     * @param params Query parameter\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#get-api-v1-statuses-id-reblogged-by\r\n     */\r\n    Masto.prototype.fetchStatusRebloggedBy = function (id, params) {\r\n        return this.gateway.paginate(\"/api/v1/statuses/\" + id + \"/reblogged_by\", params);\r\n    };\r\n    /**\r\n     * Accounts that favourited the status.\r\n     * @param id ID of target status\r\n     * @param params Query parameter\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#get-api-v1-statuses-id-favourited-by\r\n     */\r\n    Masto.prototype.fetchStatusFavouritedBy = function (id, params) {\r\n        return this.gateway.paginate(\"/api/v1/statuses/\" + id + \"/favourited_by\", params);\r\n    };\r\n    /**\r\n     * Publish a new status.\r\n     * @param params Parameters\r\n     * @param idempotencyKey The Idempotency-Key of request header\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#post-api-v1-statuses\r\n     */\r\n    Masto.prototype.createStatus = function (params, idempotencyKey) {\r\n        if (idempotencyKey) {\r\n            return this.gateway.post('/api/v1/statuses', params, {\r\n                headers: { 'Idempotency-Key': idempotencyKey },\r\n            });\r\n        }\r\n        return this.gateway.post('/api/v1/statuses', params);\r\n    };\r\n    /**\r\n     * Remove a status. The status may still be available a short while after the call.\r\n     * @param id ID of the target status\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#delete-api-v1-statuses-id\r\n     */\r\n    Masto.prototype.removeStatus = function (id) {\r\n        return this.gateway.delete(\"/api/v1/statuses/\" + id);\r\n    };\r\n    /**\r\n     * Reblog a status with id.\r\n     * @param id ID of the target status\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#post-api-v1-statuses-id-reblog\r\n     */\r\n    Masto.prototype.reblogStatus = function (id, params) {\r\n        return this.gateway.post(\"/api/v1/statuses/\" + id + \"/reblog\", params);\r\n    };\r\n    /**\r\n     * Undo the reblog of a status.\r\n     * @param id ID of the target status\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#post-api-v1-statuses-id-unreblog\r\n     */\r\n    Masto.prototype.unreblogStatus = function (id) {\r\n        return this.gateway.post(\"/api/v1/statuses/\" + id + \"/unreblog\");\r\n    };\r\n    /**\r\n     * Pin user’s own status to user’s profile.\r\n     * @param id ID of the target status\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#post-api-v1-statuses-id-pin\r\n     */\r\n    Masto.prototype.pinStatus = function (id) {\r\n        return this.gateway.post(\"/api/v1/statuses/\" + id + \"/pin\");\r\n    };\r\n    /**\r\n     * Remove pinned status from user’s profile.\r\n     * @param id ID of the target status\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#post-api-v1-statuses-id-unpin\r\n     */\r\n    Masto.prototype.unpinStatus = function (id) {\r\n        return this.gateway.post(\"/api/v1/statuses/\" + id + \"/unpin\");\r\n    };\r\n    /**\r\n     * Retrieving the home timeline\r\n     * @param params Query parameter\r\n     * @return An array of Statuses, most recent ones first.\r\n     * @see https://docs.joinmastodon.org/api/rest/timelines/#get-api-v1-timelines-home\r\n     */\r\n    Masto.prototype.fetchHomeTimeline = function (params) {\r\n        return this.gateway.paginate('/api/v1/timelines/home', params);\r\n    };\r\n    /**\r\n     * Retrieving the community timeline (aka \"Local timeline\" in the UI)\r\n     * @param params Query parameter\r\n     * @return An iterable of Statuses, most recent ones first.\r\n     * @see https://docs.joinmastodon.org/api/rest/timelines/#get-api-v1-timelines-public\r\n     */\r\n    Masto.prototype.fetchCommunityTimeline = function (params) {\r\n        return this.gateway.paginate('/api/v1/timelines/public', tslib_1.__assign({ local: true }, params));\r\n    };\r\n    /**\r\n     * Retrieving the public timeline (aka \"Federated timeline\" in the UI)\r\n     * @param params Query parameter\r\n     * @return An iterable of Statuses, most recent ones first.\r\n     * @see https://docs.joinmastodon.org/api/rest/timelines/#get-api-v1-timelines-public\r\n     */\r\n    Masto.prototype.fetchPublicTimeline = function (params) {\r\n        return this.gateway.paginate('/api/v1/timelines/public', params);\r\n    };\r\n    /**\r\n     * Retrieving a tag timeline\r\n     * @param id ID of the hashtag\r\n     * @param params Query parameter\r\n     * @return An iterable of Statuses, most recent ones first.\r\n     * @see https://docs.joinmastodon.org/api/rest/timelines/#get-api-v1-timelines-tag-hashtag\r\n     */\r\n    Masto.prototype.fetchTagTimeline = function (id, params) {\r\n        return this.gateway.paginate(\"/api/v1/timelines/tag/\" + id, params);\r\n    };\r\n    /**\r\n     * Retrieving a list timeline\r\n     * @param id ID of the list\r\n     * @param params Query parameter\r\n     * @return An iterable of Statuses, most recent ones first.\r\n     * @see https://docs.joinmastodon.org/api/rest/timelines/#get-api-v1-timelines-list-list-id\r\n     */\r\n    Masto.prototype.fetchListTimeline = function (id, params) {\r\n        return this.gateway.paginate(\"/api/v1/timelines/list/\" + id, params);\r\n    };\r\n    /**\r\n     * Retrieving a direct timeline\r\n     * @return An iterable of Statuses, most recent ones first.\r\n     */\r\n    Masto.prototype.fetchDirectTimeline = function (params) {\r\n        return this.gateway.paginate('/api/v1/timelines/direct', params);\r\n    };\r\n    /**\r\n     * Retrieving a conversation timeline\r\n     * @return An array of Conversation\r\n     */\r\n    Masto.prototype.fetchConversations = function (params) {\r\n        return this.gateway.paginate('/api/v1/conversations', params);\r\n    };\r\n    /**\r\n     * Following a remote user\r\n     * @param uri `username@domain` of the person you want to follow\r\n     * @return The local representation of the followed account, as an Account.\r\n     * @see https://github.com/tootsuite/documentation/blob/master/Using-the-API/API.md#following-a-remote-user\r\n     */\r\n    Masto.prototype.followAccountByUsername = function (uri) {\r\n        return this.gateway.post('/api/v1/follows', { uri: uri });\r\n    };\r\n    /**\r\n     * Fetch preferences\r\n     * @return User preferences\r\n     * @see https://github.com/tootsuite/mastodon/pull/10109\r\n     */\r\n    Masto.prototype.fetchPreferences = function () {\r\n        return this.gateway.get('/api/v1/preferences');\r\n    };\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"streamUser\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"streamPublicTimeline\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"streamCommunityTimeline\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"streamTagTimeline\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"streamLocalTagTimeline\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"streamListTimeline\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"streamDirectTimeline\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchAccount\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.7.0' })\r\n    ], Masto.prototype, \"createAccount\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"verifyCredentials\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"updateCredentials\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchAccountFollowers\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchAccountFollowing\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchAccountStatuses\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"followAccount\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"unfollowAccount\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchAccountRelationships\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"searchAccounts\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"createApp\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.0.0' })\r\n    ], Masto.prototype, \"verifyAppCredentials\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchBlocks\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"blockAccount\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"unblockAccount\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.0.0' })\r\n    ], Masto.prototype, \"fetchCustomEmojis\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '1.4.0' })\r\n    ], Masto.prototype, \"fetchDomainBlocks\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '1.4.0' })\r\n    ], Masto.prototype, \"blockDomain\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '1.4.0' })\r\n    ], Masto.prototype, \"unblockDomain\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.5.0' })\r\n    ], Masto.prototype, \"fetchEndorsements\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.5.0' })\r\n    ], Masto.prototype, \"pinAccount\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.5.0' })\r\n    ], Masto.prototype, \"unpinAccount\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchFavourites\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"favouriteStatus\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"unfavouriteStatus\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.4.3' })\r\n    ], Masto.prototype, \"fetchFilters\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.4.3' })\r\n    ], Masto.prototype, \"fetchFilter\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.4.3' })\r\n    ], Masto.prototype, \"createFiler\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.4.3' })\r\n    ], Masto.prototype, \"updateFilter\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.4.3' })\r\n    ], Masto.prototype, \"removeFilter\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchFollowRequests\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"authorizeFollowRequest\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"rejectFollowRequest\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.4.3' })\r\n    ], Masto.prototype, \"fetchSuggestions\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.4.3' })\r\n    ], Masto.prototype, \"removeSuggestion\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchInstance\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.1.2' })\r\n    ], Masto.prototype, \"fetchInstancesPeers\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.1.2' })\r\n    ], Masto.prototype, \"fetchInstanceActivity\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.1.0' })\r\n    ], Masto.prototype, \"fetchLists\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.1.0' })\r\n    ], Masto.prototype, \"fetchAccountLists\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.1.0' })\r\n    ], Masto.prototype, \"fetchListAccounts\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.1.0' })\r\n    ], Masto.prototype, \"fetchList\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.1.0' })\r\n    ], Masto.prototype, \"createList\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.1.0' })\r\n    ], Masto.prototype, \"updateList\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.1.0' })\r\n    ], Masto.prototype, \"removeList\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.1.0' })\r\n    ], Masto.prototype, \"addAccountToList\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.1.0' })\r\n    ], Masto.prototype, \"removeAccountFromList\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"uploadMediaAttachment\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"updateMediaAttachment\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchMutes\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"muteAccount\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"unmuteAccount\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '1.4.2' })\r\n    ], Masto.prototype, \"muteStatus\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '1.4.2' })\r\n    ], Masto.prototype, \"unmuteStatus\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchNotifications\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchNotification\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"clearNotifications\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"dissmissNotification\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.4.0' })\r\n    ], Masto.prototype, \"addPushSubscription\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.4.0' })\r\n    ], Masto.prototype, \"fetchPushSubscription\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.4.0' })\r\n    ], Masto.prototype, \"updatePushSubscription\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.4.0' })\r\n    ], Masto.prototype, \"removePushSubscription\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.8.0' })\r\n    ], Masto.prototype, \"fetchPoll\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.8.0' })\r\n    ], Masto.prototype, \"votePoll\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '1.1.0' })\r\n    ], Masto.prototype, \"reportAccount\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.7.0' })\r\n    ], Masto.prototype, \"fetchScheduledStatuses\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.7.0' })\r\n    ], Masto.prototype, \"fetchScheduledStatus\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.7.0' })\r\n    ], Masto.prototype, \"updateScheduledStatus\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.7.0' })\r\n    ], Masto.prototype, \"removeScheduledStatus\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.4.1' })\r\n    ], Masto.prototype, \"search\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchStatus\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchStatusContext\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchStatusCard\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchStatusRebloggedBy\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchStatusFavouritedBy\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"createStatus\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"removeStatus\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"reblogStatus\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"unreblogStatus\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '1.6.0' })\r\n    ], Masto.prototype, \"pinStatus\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '1.6.0' })\r\n    ], Masto.prototype, \"unpinStatus\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchHomeTimeline\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchCommunityTimeline\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchPublicTimeline\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"fetchTagTimeline\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.1.0' })\r\n    ], Masto.prototype, \"fetchListTimeline\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0', until: '2.5.2' })\r\n    ], Masto.prototype, \"fetchDirectTimeline\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.6.0' })\r\n    ], Masto.prototype, \"fetchConversations\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '0.0.0' })\r\n    ], Masto.prototype, \"followAccountByUsername\", null);\r\n    tslib_1.__decorate([\r\n        available({ since: '2.8.0' })\r\n    ], Masto.prototype, \"fetchPreferences\", null);\r\n    return Masto;\r\n}());\r\nexport { Masto };\r\n","references":["/Users/nucx/.ghq/github.com/neet/masto.js/src/entities/account.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/entities/application.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/entities/attachment.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/entities/card.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/entities/context.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/entities/conversation.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/entities/emoji.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/entities/filter.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/entities/instance.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/entities/list.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/entities/notification.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/entities/oauth.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/entities/poll.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/entities/preference.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/entities/push-subscription.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/entities/relationship.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/entities/results.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/entities/scheduled-status.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/entities/status.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/client/decorators.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/client/gateway.ts","/Users/nucx/.ghq/github.com/neet/masto.js/src/client/params.ts"],"dts":{"name":"/Users/nucx/.ghq/github.com/neet/masto.js/client/masto.d.ts","writeByteOrderMark":false,"text":"import { Account, AccountCredentials } from '../entities/account';\r\nimport { Application } from '../entities/application';\r\nimport { Attachment } from '../entities/attachment';\r\nimport { Card } from '../entities/card';\r\nimport { Context } from '../entities/context';\r\nimport { Conversation } from '../entities/conversation';\r\nimport { Emoji } from '../entities/emoji';\r\nimport { Filter } from '../entities/filter';\r\nimport { Instance, InstanceActivity } from '../entities/instance';\r\nimport { List } from '../entities/list';\r\nimport { Notification } from '../entities/notification';\r\nimport { OAuthClient, OAuthToken } from '../entities/oauth';\r\nimport { Poll } from '../entities/poll';\r\nimport { Preference } from '../entities/preference';\r\nimport { PushSubscription } from '../entities/push-subscription';\r\nimport { Relationship } from '../entities/relationship';\r\nimport { Results, ResultsV1 } from '../entities/results';\r\nimport { ScheduledStatus } from '../entities/scheduled-status';\r\nimport { Status } from '../entities/status';\r\nimport { Gateway } from './gateway';\r\nimport { AddPushSubscriptionParams, CreateAccountParams, CreateAppParams, CreateStatusParams, FetchAccessTokenParams, FetchAccountStatusesParams, FetchNotificationsParams, FetchTimelineParams, FollowAccountParams, LoginParams, ModifyFilterParams, ModifyListAccountsParams, ModifyListParams, MuteAccountParams, PaginationParams, ReblogStatusParams, ReportAccountParams, RevokeAccessTokenParams, SearchAccountsParams, SearchParams, UpdateCredentialsParams, UpdateMediaAttachmentParams, UpdatePushSubscriptionParams, UpdateScheduledStatusParams, UploadMediaAttachmentParams, VotePollParams } from './params';\r\n/**\r\n * Mastodon API client\r\n */\r\nexport declare class Masto {\r\n    /** Instance of Gateway */\r\n    gateway: Gateway;\r\n    /**\r\n     * Private constructor\r\n     * @param gateway Instance of Gateway\r\n     */\r\n    private constructor();\r\n    /**\r\n     * Login to Mastodon\r\n     * @param params Paramters\r\n     * @return Instance of Mastodon class\r\n     */\r\n    static login(params: LoginParams): Promise<Masto>;\r\n    /**\r\n     * Starting home timeline and notification streaming\r\n     * @return Instance of EventEmitter\r\n     * @see https://docs.joinmastodon.org/api/streaming/#get-api-v1-streaming-user\r\n     */\r\n    streamUser(): Promise<import(\"./masto-events\").MastoEvents>;\r\n    /**\r\n     * Starting federated timeline streaming\r\n     * @return Instance of EventEmitter\r\n     * @see https://docs.joinmastodon.org/api/streaming/#get-api-v1-streaming-public\r\n     */\r\n    streamPublicTimeline(): Promise<import(\"./masto-events\").MastoEvents>;\r\n    /**\r\n     * Starting local timeline streaming\r\n     * @return Instance of EventEmitter\r\n     * @see https://docs.joinmastodon.org/api/streaming/#get-api-v1-streaming-public-local\r\n     */\r\n    streamCommunityTimeline(): Promise<import(\"./masto-events\").MastoEvents>;\r\n    /**\r\n     * Starting tag timeline streaming\r\n     * @param id ID of the tag\r\n     * @return Instance of EventEmitter\r\n     * @see https://docs.joinmastodon.org/api/streaming/#get-api-v1-streaming-hashtag-tag-hashtag\r\n     */\r\n    streamTagTimeline(id: string): Promise<import(\"./masto-events\").MastoEvents>;\r\n    /**\r\n     * Starting local tag timeline streaming\r\n     * @param id ID of the tag\r\n     * @return Instance of EventEmitter\r\n     * @see https://docs.joinmastodon.org/api/streaming/#get-api-v1-streaming-hashtag-local-tag-hashtag\r\n     */\r\n    streamLocalTagTimeline(id: string): Promise<import(\"./masto-events\").MastoEvents>;\r\n    /**\r\n     * Starting list timeline streaming\r\n     * @param id ID of the list\r\n     * @return Instance of EventEmitter\r\n     * @see https://docs.joinmastodon.org/api/streaming/#get-api-v1-streaming-list-list-list-id\r\n     */\r\n    streamListTimeline(id: string): Promise<import(\"./masto-events\").MastoEvents>;\r\n    /**\r\n     * Starting direct timeline streaming\r\n     * @return Instance of EventEmitter\r\n     * @see https://docs.joinmastodon.org/api/streaming/#get-api-v1-streaming-direct\r\n     */\r\n    streamDirectTimeline(): Promise<import(\"./masto-events\").MastoEvents>;\r\n    /**\r\n     * Fetch access token from authorization code\r\n     * @param params Parameters\r\n     * @return OauthToken\r\n     * @see https://docs.joinmastodon.org/api/authentication/#post-oauth-token\r\n     */\r\n    fetchAccessToken(params: FetchAccessTokenParams): Promise<OAuthToken>;\r\n    /**\r\n     * Revoke access token parmanently\r\n     * @param params Client credentials\r\n     * @see https://docs.joinmastodon.org/api/authentication/#post-oauth-revoke\r\n     */\r\n    revokeAccessToken(params: RevokeAccessTokenParams): Promise<void>;\r\n    /**\r\n     * Fetching an account\r\n     * @param id ID of the account\r\n     * @return Returns Account\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#get-api-v1-accounts-id\r\n     */\r\n    fetchAccount(id: string): Promise<Account>;\r\n    /**\r\n     * Create an account with given profile\r\n     * @param params Data of the user to create\r\n     * @return Access token\r\n     */\r\n    createAccount(params: CreateAccountParams): Promise<OAuthToken>;\r\n    /**\r\n     * User’s own account.\r\n     * @return Returns Account with an extra source attribute.\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#get-api-v1-accounts-verify-credentials\r\n     */\r\n    verifyCredentials(): Promise<AccountCredentials>;\r\n    /**\r\n     * Update user’s own account.\r\n     * @param params Form data\r\n     * @return Returns Account\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#patch-api-v1-accounts-update-credentials\r\n     */\r\n    updateCredentials(params?: UpdateCredentialsParams): Promise<AccountCredentials>;\r\n    /**\r\n     * Accounts which follow the given account.\r\n     * @param id ID of the target account\r\n     * @param params Query parameters\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#get-api-v1-accounts-id-followers\r\n     */\r\n    fetchAccountFollowers(id: string, params?: PaginationParams): AsyncIterableIterator<Account[] | undefined>;\r\n    /**\r\n     * Accounts which the given account is following.\r\n     * @param id ID of the target account\r\n     * @param params Query parameter\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#get-api-v1-accounts-id-following\r\n     */\r\n    fetchAccountFollowing(id: string, params?: PaginationParams): AsyncIterableIterator<Account[] | undefined>;\r\n    /**\r\n     * An account’s statuses.\r\n     * @param id ID of the target account\r\n     * @param params Query parameter\r\n     * @return Returns array of Status\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#get-api-v1-accounts-id-statuses\r\n     */\r\n    fetchAccountStatuses(id: string, params?: FetchAccountStatusesParams): AsyncIterableIterator<Status[] | undefined>;\r\n    /**\r\n     * Follow an account by id\r\n     * @param id ID of the target account\r\n     * @param params Options\r\n     * @return Returns Relationship\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#post-api-v1-accounts-id-follow\r\n     */\r\n    followAccount(id: string, params?: FollowAccountParams): Promise<Relationship>;\r\n    /**\r\n     * Unfollow an account by id\r\n     * @param id ID of the target account\r\n     * @return Returns Relationship\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#post-api-v1-accounts-id-unfollow\r\n     */\r\n    unfollowAccount(id: string): Promise<Relationship>;\r\n    /**\r\n     * Relationship of the user to the given accounts in regards to following, blocking, muting, etc.\r\n     * @param id Array of account IDs\r\n     * @return Returns array of Relationship\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#get-api-v1-accounts-relationships\r\n     */\r\n    fetchAccountRelationships(id: string[]): Promise<Relationship[]>;\r\n    /**\r\n     * Search for matching accounts by username, domain and display name.\r\n     * @param params Query parameter\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/accounts/#get-api-v1-accounts-search\r\n     */\r\n    searchAccounts(params?: SearchAccountsParams): Promise<Account[]>;\r\n    /**\r\n     * Create a new application to obtain OAuth2 credentials.\r\n     * @param params Parameters\r\n     * @return Returns App with client_id and client_secret\r\n     * @see https://docs.joinmastodon.org/api/rest/apps/#post-api-v1-apps\r\n     */\r\n    createApp(params: CreateAppParams): Promise<OAuthClient>;\r\n    /**\r\n     * Confirm that the app’s OAuth2 credentials work.\r\n     * @return Returns App\r\n     * @see https://docs.joinmastodon.org/api/rest/apps/#get-api-v1-apps-verify-credentials\r\n     */\r\n    verifyAppCredentials(): Promise<Application>;\r\n    /**\r\n     * Accounts the user has blocked.\r\n     * @param params Query parameter\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/blocks/#get-api-v1-blocks\r\n     */\r\n    fetchBlocks(params?: PaginationParams): AsyncIterableIterator<Account[] | undefined>;\r\n    /**\r\n     * Block an account with id\r\n     * @param id ID of the target account\r\n     * @return Returns Relationship\r\n     * @see https://docs.joinmastodon.org/api/rest/blocks/#post-api-v1-accounts-id-block\r\n     */\r\n    blockAccount(id: string): Promise<Relationship>;\r\n    /**\r\n     * Unblock an account with id\r\n     * @param id ID of the target account\r\n     * @return Returns Relationship\r\n     * @see https://docs.joinmastodon.org/api/rest/blocks/#post-api-v1-accounts-id-unblock\r\n     */\r\n    unblockAccount(id: string): Promise<Relationship>;\r\n    /**\r\n     * Custom emojis that are available on the server.\r\n     * @return Returns array of Emoji\r\n     * @see https://docs.joinmastodon.org/api/rest/custom-emojis/#get-api-v1-custom-emojis\r\n     */\r\n    fetchCustomEmojis(): Promise<Emoji[]>;\r\n    /**\r\n     * Domains the user has blocked.\r\n     * @param params Query parameter\r\n     * @return Returns array of string.\r\n     * @see https://docs.joinmastodon.org/api/rest/domain-blocks/#get-api-v1-domain-blocks\r\n     */\r\n    fetchDomainBlocks(params?: PaginationParams): AsyncIterableIterator<string[] | undefined>;\r\n    /**\r\n     * Block a domain to hide all public posts from it, all notifications from it, and remove all followers from it.\r\n     * @param domain Domain to block\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/domain-blocks/#post-api-v1-domain-blocks\r\n     */\r\n    blockDomain(domain: string): Promise<void>;\r\n    /**\r\n     * Remove a domain block.\r\n     * @param domain Domain to unblock\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/domain-blocks/#delete-api-v1-domain-blocks\r\n     */\r\n    unblockDomain(domain: string): Promise<void>;\r\n    /**\r\n     * Accounts the user chose to endorse.\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/endorsements/#get-api-v1-endorsements\r\n     */\r\n    fetchEndorsements(params?: PaginationParams): AsyncIterableIterator<Account[] | undefined>;\r\n    /**\r\n     * Endorse an account, i.e. choose to feature the account on the user’s public profile.\r\n     * @param id ID of the target account\r\n     * @return Returns Relationship\r\n     * @see https://docs.joinmastodon.org/api/rest/endorsements/#post-api-v1-accounts-id-pin\r\n     */\r\n    pinAccount(id: string): Promise<Relationship>;\r\n    /**\r\n     * Unpin an account with id\r\n     * @param id ID of the target account\r\n     * @return Returns Relationship\r\n     * @see https://docs.joinmastodon.org/api/rest/endorsements/#post-api-v1-accounts-id-unpin\r\n     */\r\n    unpinAccount(id: string): Promise<Relationship>;\r\n    /**\r\n     * Statuses the user has favourited.\r\n     * @param params Query parameter\r\n     * @return Returns array of Status\r\n     * @see https://docs.joinmastodon.org/api/rest/favourites/#get-api-v1-favourites\r\n     */\r\n    fetchFavourites(params?: PaginationParams): AsyncIterableIterator<Status[] | undefined>;\r\n    /**\r\n     * Favourite a status with id\r\n     * @param id ID of the target status\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/favourites/#post-api-v1-statuses-id-favourite\r\n     */\r\n    favouriteStatus(id: string): Promise<Status>;\r\n    /**\r\n     * Undo the favourite of a status.\r\n     * @param id ID of the target status\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/favourites/#post-api-v1-statuses-id-unfavourite\r\n     */\r\n    unfavouriteStatus(id: string): Promise<Status>;\r\n    /**\r\n     * Text filters the user has configured that potentially must be applied client-side.\r\n     * @return An array of Filters\r\n     * @see https://docs.joinmastodon.org/api/rest/filters/#get-api-v1-filters\r\n     */\r\n    fetchFilters(): Promise<Filter[]>;\r\n    /**\r\n     * A text filter.\r\n     * @param id ID of the filter\r\n     * @return Returns Filter\r\n     * @see https://docs.joinmastodon.org/api/rest/filters/#get-api-v1-filters-id\r\n     */\r\n    fetchFilter(id: string): Promise<Filter>;\r\n    /**\r\n     * Create a new filter.\r\n     * @param params Parameters\r\n     * @return Returns Filter\r\n     * @see https://docs.joinmastodon.org/api/rest/filters/#post-api-v1-filters\r\n     */\r\n    createFiler(params?: ModifyFilterParams): Promise<Filter>;\r\n    /**\r\n     * Update a text filter.\r\n     * @param id ID of the filter\r\n     * @param params Optinal parameter\r\n     * @return Returns Filter\r\n     * @see https://docs.joinmastodon.org/api/rest/filters/#put-api-v1-filters-id\r\n     */\r\n    updateFilter(id: string, params?: ModifyFilterParams): Promise<Filter>;\r\n    /**\r\n     * Delete a text filter.\r\n     * @param id ID of the filter\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/filters/#delete-api-v1-filters-id\r\n     */\r\n    removeFilter(id: string): Promise<void>;\r\n    /**\r\n     * Accounts that have requested to follow the user.\r\n     * @param params Query parameter\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/follow-requests/#get-api-v1-follow-requests\r\n     */\r\n    fetchFollowRequests(params?: PaginationParams): AsyncIterableIterator<Account[] | undefined>;\r\n    /**\r\n     * Allow the account to follow the user.\r\n     * @param id ID of the target account\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/follow-requests/#post-api-v1-follow-requests-id-authorize\r\n     */\r\n    authorizeFollowRequest(id: string): Promise<void>;\r\n    /**\r\n     * Do not allow the account to follow the user.\r\n     * @param id ID of the target account\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/follow-requests/#post-api-v1-follow-requests-id-reject\r\n     */\r\n    rejectFollowRequest(id: string): Promise<void>;\r\n    /**\r\n     * Accounts the user had past positive interactions with, but is not following yet.\r\n     * @return An array of Accounts\r\n     * @see https://docs.joinmastodon.org/api/rest/follow-suggestions/#get-api-v1-suggestions\r\n     */\r\n    fetchSuggestions(): Promise<Account[]>;\r\n    /**\r\n     * Remove account from suggestions.\r\n     * @param id ID of the target account\r\n     * @return An array of Accounts\r\n     * @see https://docs.joinmastodon.org/api/rest/follow-suggestions/#delete-api-v1-suggestions-account-id\r\n     */\r\n    removeSuggestion(id: string): Promise<void>;\r\n    /**\r\n     * Information about the server.\r\n     * @return Returns Instance\r\n     * @see https://docs.joinmastodon.org/api/rest/instances/#get-api-v1-instance\r\n     */\r\n    fetchInstance(): Promise<Instance>;\r\n    /**\r\n     * Fetching instance's peers\r\n     * @return An array of peer instance's domain\r\n     * @see https://github.com/tootsuite/mastodon/pull/6125\r\n     */\r\n    fetchInstancesPeers(): Promise<string[]>;\r\n    /**\r\n     * Fetching activities of current instance\r\n     * @return An array of InstanceActivity\r\n     * @see https://github.com/tootsuite/mastodon/pull/6125\r\n     */\r\n    fetchInstanceActivity(): Promise<InstanceActivity[]>;\r\n    /**\r\n     * User’s lists.\r\n     * @return Returns array of List\r\n     * @see https://docs.joinmastodon.org/api/rest/lists/#get-api-v1-lists\r\n     */\r\n    fetchLists(): Promise<List[]>;\r\n    /**\r\n     * User’s lists that a given account is part of.\r\n     * @param id ID of the target list\r\n     * @return Returns array of List\r\n     * @see https://docs.joinmastodon.org/api/rest/lists/#get-api-v1-accounts-id-lists\r\n     */\r\n    fetchAccountLists(id: string): Promise<List[]>;\r\n    /**\r\n     * Accounts that are in a given list.\r\n     * @param id ID of the target list\r\n     * @param params Optional params\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/lists/#get-api-v1-lists-id-accounts\r\n     */\r\n    fetchListAccounts(id: string, params?: PaginationParams): AsyncIterableIterator<Account[] | undefined>;\r\n    /**\r\n     * Fetch a list with id\r\n     * @param id ID of the targtet list\r\n     * @return Returns List\r\n     * @see https://docs.joinmastodon.org/api/rest/lists/#get-api-v1-lists-id\r\n     */\r\n    fetchList(id: string): Promise<List>;\r\n    /**\r\n     * Create a new list.\r\n     * @param params Options\r\n     * @return Returns List\r\n     * @see https://docs.joinmastodon.org/api/rest/lists/#post-api-v1-lists\r\n     */\r\n    createList(params: ModifyListParams): Promise<List>;\r\n    /**\r\n     * Update a list with title and id\r\n     * @param id ID of the target list\r\n     * @param params Options\r\n     * @return Returns List\r\n     * @see https://docs.joinmastodon.org/api/rest/lists/#put-api-v1-lists-id\r\n     */\r\n    updateList(id: string, params: ModifyListParams): Promise<List>;\r\n    /**\r\n     * Remove a list with id\r\n     * @param id ID of the target list\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/lists/#delete-api-v1-lists-id\r\n     */\r\n    removeList(id: string): Promise<void>;\r\n    /**\r\n     * Add accounts to a list.\r\n     * @param id ID of the target list\r\n     * @param params Parameter\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/lists/#post-api-v1-lists-id-accounts\r\n     */\r\n    addAccountToList(id: string, params: ModifyListAccountsParams): Promise<void>;\r\n    /**\r\n     * Remove accounts from a list.\r\n     * @param id ID of the target list\r\n     * @param params Parameter\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/lists/#delete-api-v1-lists-id-accounts\r\n     */\r\n    removeAccountFromList(id: string, params: ModifyListAccountsParams): Promise<void>;\r\n    /**\r\n     * Upload a media attachment that can be used with a new status.\r\n     * @param params Form data\r\n     * @return Returns Attachment\r\n     * @see https://docs.joinmastodon.org/api/rest/media/#post-api-v1-media\r\n     */\r\n    uploadMediaAttachment(params: UploadMediaAttachmentParams): Promise<Attachment>;\r\n    /**\r\n     * Update a media attachment. Can only be done before the media is attached to a status.\r\n     * @param id ID of the target attachment\r\n     * @param params Form data\r\n     * @return Returns Returns Attachment\r\n     * @see https://docs.joinmastodon.org/api/rest/media/#put-api-v1-media-id\r\n     */\r\n    updateMediaAttachment(id: string, params: UpdateMediaAttachmentParams): Promise<Attachment>;\r\n    /**\r\n     * Accounts the user has muted.\r\n     * @param params Query parameter\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/mutes/#get-api-v1-mutes\r\n     */\r\n    fetchMutes(params?: PaginationParams): AsyncIterableIterator<Account[] | undefined>;\r\n    /**\r\n     * Mute an account with id\r\n     * @param id ID of the target account\r\n     * @param params Options\r\n     * @return Returns Relationship\r\n     * @see https://docs.joinmastodon.org/api/rest/mutes/#post-api-v1-accounts-id-mute\r\n     */\r\n    muteAccount(id: string, params: MuteAccountParams): Promise<Relationship>;\r\n    /**\r\n     * Unmute an account with id\r\n     * @param id ID of the target account\r\n     * @return Returns Relationship\r\n     * @see https://docs.joinmastodon.org/api/rest/mutes/#post-api-v1-accounts-id-unmute\r\n     */\r\n    unmuteAccount(id: string): Promise<Relationship>;\r\n    /**\r\n     * Mute the conversation the status is part of, to no longer be notified about it.\r\n     * @param id ID of the target account\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/mutes/#post-api-v1-status-id-mute\r\n     */\r\n    muteStatus(id: string): Promise<Status>;\r\n    /**\r\n     * Unmute the conversation the status is part of.\r\n     * @param id ID of the target account\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/mutes/#post-api-v1-status-id-unmute\r\n     */\r\n    unmuteStatus(id: string): Promise<Status>;\r\n    /**\r\n     * Notifications concerning the user.\r\n     * @param params Query parameter\r\n     * @return Returns array of Notification\r\n     * @see https://docs.joinmastodon.org/api/rest/notifications/#get-api-v1-notifications\r\n     */\r\n    fetchNotifications(params?: FetchNotificationsParams): Promise<Notification[]>;\r\n    /**\r\n     * Getting a single notification\r\n     * @param id Notification ID\r\n     * @return Returns Notification\r\n     * @see https://docs.joinmastodon.org/api/rest/notifications/#get-api-v1-notifications-id\r\n     */\r\n    fetchNotification(id: string): Promise<Notification>;\r\n    /**\r\n     * Delete all notifications from the server.\r\n     * @return Returns an empty object.\r\n     * @see https://docs.joinmastodon.org/api/rest/notifications/#post-api-v1-notifications-clear\r\n     */\r\n    clearNotifications(): Promise<void>;\r\n    /**\r\n     * Delete a single notification from the server.\r\n     * @param id Notification ID\r\n     * @return Returns an empty object.\r\n     * @see https://docs.joinmastodon.org/api/rest/notifications/#post-api-v1-notifications-dismiss\r\n     */\r\n    dissmissNotification(id: string): Promise<void>;\r\n    /**\r\n     * Add a Web Push API subscription to receive notifications. See also: Web Push API\r\n     * @param params Form data\r\n     * @return Returns Push Subscription\r\n     * @see https://docs.joinmastodon.org/api/rest/notifications/#put-api-v1-push-subscription\r\n     */\r\n    addPushSubscription(params: AddPushSubscriptionParams): Promise<PushSubscription>;\r\n    /**\r\n     * Fetch Push Subscription for notifications\r\n     * @return Returns Push Subscription\r\n     * @see https://docs.joinmastodon.org/api/rest/notifications/#get-api-v1-push-subscription\r\n     */\r\n    fetchPushSubscription(): Promise<PushSubscription>;\r\n    /**\r\n     * Update current Web Push API subscription. Only the `data` part can be updated, e.g. which types of notifications are desired. To change fundamentals, a new subscription must be created instead.\r\n     * @param params Form data\r\n     * @return Returns Push Subscription\r\n     * @see https://docs.joinmastodon.org/api/rest/notifications/#put-api-v1-push-subscription\r\n     */\r\n    updatePushSubscription(params: UpdatePushSubscriptionParams): Promise<PushSubscription>;\r\n    /**\r\n     * Remove the current Web Push API subscription.\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/notifications/#delete-api-v1-push-subscription\r\n     */\r\n    removePushSubscription(): Promise<void>;\r\n    /**\r\n     * Fetch poll by its ID\r\n     * @param id ID of the poll\r\n     * @return Poll\r\n     * @see https://docs.joinmastodon.org/api/rest/polls/#get-api-v1-polls-id\r\n     */\r\n    fetchPoll(id: string): Promise<Poll>;\r\n    /**\r\n     * Vote on a poll\r\n     * @param id ID of the poll\r\n     * @param options Options\r\n     * @return Poll\r\n     * @see https://docs.joinmastodon.org/api/rest/polls/#post-api-v1-polls-id-votes\r\n     */\r\n    votePoll(id: string, params: VotePollParams): Promise<Poll>;\r\n    /**\r\n     * Report an account to moderators/administrators\r\n     * @param params Parameters\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/reports/#post-api-v1-reports\r\n     */\r\n    reportAccount(params: ReportAccountParams): Promise<void>;\r\n    /**\r\n     * Get scheduled statuses\r\n     * @return An array of ScheduledStatus\r\n     * @see https://docs.joinmastodon.org/api/rest/scheduled-statuses/#get-api-v1-scheduled-statuses\r\n     */\r\n    fetchScheduledStatuses(): Promise<ScheduledStatus[]>;\r\n    /**\r\n     * Get scheduled status\r\n     * @param id ID of the scheduled status\r\n     * @return ScheduledStatus\r\n     * @see https://docs.joinmastodon.org/api/rest/scheduled-statuses/#get-api-v1-scheduled-statuses-id\r\n     */\r\n    fetchScheduledStatus(id: string): Promise<ScheduledStatus>;\r\n    /**\r\n     * Update Scheduled status. Only `scheduled_at` can be changed. To change the content, delete it and post a new status.\r\n     * @param id ID of the scheduled status\r\n     * @param params Parameters\r\n     * @return ScheduledStatus\r\n     * @see https://docs.joinmastodon.org/api/rest/scheduled-statuses/#put-api-v1-scheduled-statuses-id\r\n     */\r\n    updateScheduledStatus(id: string, params: UpdateScheduledStatusParams): Promise<ScheduledStatus>;\r\n    /**\r\n     * Remove scheduled status\r\n     * @param id ID of the status\r\n     * @return Nothing\r\n     * @see https://docs.joinmastodon.org/api/rest/scheduled-statuses/#delete-api-v1-scheduled-statuses-id\r\n     */\r\n    removeScheduledStatus(id: string): Promise<void>;\r\n    /**\r\n     * Search for content in accounts, statuses and hashtags.\r\n     * @param params Parameters\r\n     * @param version Version of Mastodon API (default: `'v2'`)\r\n     * @return Returns Results\r\n     * @see https://docs.joinmastodon.org/api/rest/search/#get-api-v2-search\r\n     */\r\n    search<V extends 'v1' | 'v2'>(params: SearchParams, version?: V): AsyncIterableIterator<(V extends \"v2\" ? Results : ResultsV1) | undefined>;\r\n    /**\r\n     * Fetch a status with id\r\n     * @param id ID of the target status\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#get-api-v1-statuses-id\r\n     */\r\n    fetchStatus(id: string): Promise<Status>;\r\n    /**\r\n     * What the status replies to, and replies to it.\r\n     * @param id ID of the target status\r\n     * @return Returns Context\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#get-api-v1-statuses-id-context\r\n     */\r\n    fetchStatusContext(id: string): Promise<Context>;\r\n    /**\r\n     * Link preview card for a status, if available.\r\n     * @return Returns Card\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#get-api-v1-statuses-id-card\r\n     */\r\n    fetchStatusCard(id: string): Promise<Card>;\r\n    /**\r\n     * Accounts that reblogged the status.\r\n     * @param id ID of target status\r\n     * @param params Query parameter\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#get-api-v1-statuses-id-reblogged-by\r\n     */\r\n    fetchStatusRebloggedBy(id: string, params?: PaginationParams): AsyncIterableIterator<Account[] | undefined>;\r\n    /**\r\n     * Accounts that favourited the status.\r\n     * @param id ID of target status\r\n     * @param params Query parameter\r\n     * @return Returns array of Account\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#get-api-v1-statuses-id-favourited-by\r\n     */\r\n    fetchStatusFavouritedBy(id: string, params?: PaginationParams): AsyncIterableIterator<Account[] | undefined>;\r\n    /**\r\n     * Publish a new status.\r\n     * @param params Parameters\r\n     * @param idempotencyKey The Idempotency-Key of request header\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#post-api-v1-statuses\r\n     */\r\n    createStatus(params?: CreateStatusParams, idempotencyKey?: string): Promise<{}>;\r\n    /**\r\n     * Remove a status. The status may still be available a short while after the call.\r\n     * @param id ID of the target status\r\n     * @return An empty object\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#delete-api-v1-statuses-id\r\n     */\r\n    removeStatus(id: string): Promise<void>;\r\n    /**\r\n     * Reblog a status with id.\r\n     * @param id ID of the target status\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#post-api-v1-statuses-id-reblog\r\n     */\r\n    reblogStatus(id: string, params?: ReblogStatusParams): Promise<Status>;\r\n    /**\r\n     * Undo the reblog of a status.\r\n     * @param id ID of the target status\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#post-api-v1-statuses-id-unreblog\r\n     */\r\n    unreblogStatus(id: string): Promise<Status>;\r\n    /**\r\n     * Pin user’s own status to user’s profile.\r\n     * @param id ID of the target status\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#post-api-v1-statuses-id-pin\r\n     */\r\n    pinStatus(id: string): Promise<Status>;\r\n    /**\r\n     * Remove pinned status from user’s profile.\r\n     * @param id ID of the target status\r\n     * @return Returns Status\r\n     * @see https://docs.joinmastodon.org/api/rest/statuses/#post-api-v1-statuses-id-unpin\r\n     */\r\n    unpinStatus(id: string): Promise<Status>;\r\n    /**\r\n     * Retrieving the home timeline\r\n     * @param params Query parameter\r\n     * @return An array of Statuses, most recent ones first.\r\n     * @see https://docs.joinmastodon.org/api/rest/timelines/#get-api-v1-timelines-home\r\n     */\r\n    fetchHomeTimeline(params?: FetchTimelineParams): AsyncIterableIterator<Status[] | undefined>;\r\n    /**\r\n     * Retrieving the community timeline (aka \"Local timeline\" in the UI)\r\n     * @param params Query parameter\r\n     * @return An iterable of Statuses, most recent ones first.\r\n     * @see https://docs.joinmastodon.org/api/rest/timelines/#get-api-v1-timelines-public\r\n     */\r\n    fetchCommunityTimeline(params?: FetchTimelineParams): AsyncIterableIterator<Status[] | undefined>;\r\n    /**\r\n     * Retrieving the public timeline (aka \"Federated timeline\" in the UI)\r\n     * @param params Query parameter\r\n     * @return An iterable of Statuses, most recent ones first.\r\n     * @see https://docs.joinmastodon.org/api/rest/timelines/#get-api-v1-timelines-public\r\n     */\r\n    fetchPublicTimeline(params?: FetchTimelineParams): AsyncIterableIterator<Status[] | undefined>;\r\n    /**\r\n     * Retrieving a tag timeline\r\n     * @param id ID of the hashtag\r\n     * @param params Query parameter\r\n     * @return An iterable of Statuses, most recent ones first.\r\n     * @see https://docs.joinmastodon.org/api/rest/timelines/#get-api-v1-timelines-tag-hashtag\r\n     */\r\n    fetchTagTimeline(id: string, params?: FetchTimelineParams): AsyncIterableIterator<Status[] | undefined>;\r\n    /**\r\n     * Retrieving a list timeline\r\n     * @param id ID of the list\r\n     * @param params Query parameter\r\n     * @return An iterable of Statuses, most recent ones first.\r\n     * @see https://docs.joinmastodon.org/api/rest/timelines/#get-api-v1-timelines-list-list-id\r\n     */\r\n    fetchListTimeline(id: string, params?: FetchTimelineParams): AsyncIterableIterator<Status[] | undefined>;\r\n    /**\r\n     * Retrieving a direct timeline\r\n     * @return An iterable of Statuses, most recent ones first.\r\n     */\r\n    fetchDirectTimeline(params?: FetchTimelineParams): AsyncIterableIterator<Status[] | undefined>;\r\n    /**\r\n     * Retrieving a conversation timeline\r\n     * @return An array of Conversation\r\n     */\r\n    fetchConversations(params?: PaginationParams): AsyncIterableIterator<Conversation[] | undefined>;\r\n    /**\r\n     * Following a remote user\r\n     * @param uri `username@domain` of the person you want to follow\r\n     * @return The local representation of the followed account, as an Account.\r\n     * @see https://github.com/tootsuite/documentation/blob/master/Using-the-API/API.md#following-a-remote-user\r\n     */\r\n    followAccountByUsername(uri: string): Promise<Account>;\r\n    /**\r\n     * Fetch preferences\r\n     * @return User preferences\r\n     * @see https://github.com/tootsuite/mastodon/pull/10109\r\n     */\r\n    fetchPreferences(): Promise<Preference>;\r\n}\r\n"}}
