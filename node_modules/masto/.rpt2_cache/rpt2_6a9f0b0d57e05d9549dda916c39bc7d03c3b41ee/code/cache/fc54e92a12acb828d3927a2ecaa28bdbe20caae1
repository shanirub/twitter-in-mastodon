{"code":"import * as tslib_1 from \"tslib\";\r\nimport axios from 'axios';\r\n// tslint:disable-next-line no-import-side-effect\r\nimport 'isomorphic-form-data';\r\nimport * as querystring from 'querystring';\r\nimport { oc } from 'ts-optchain';\r\nimport { MastoNotFoundError } from '../errors/masto-not-found-error';\r\nimport { MastoRateLimitError } from '../errors/masto-rate-limit-error';\r\nimport { MastoUnauthorizedError } from '../errors/masto-unauthorized-error';\r\nimport { MastoEvents } from './masto-events';\r\nimport { isAxiosError, normalizeUrl } from './utils';\r\n/**\r\n * Mastodon network request wrapper\r\n * @param params Optional params\r\n */\r\nvar Gateway = /** @class */ (function () {\r\n    function Gateway(params) {\r\n        /** URI of the instance */\r\n        this._uri = '';\r\n        /** Streaming API URL of the instance */\r\n        this._streamingApiUrl = '';\r\n        /** Version of the current instance */\r\n        this._version = '';\r\n        /** API token of the user */\r\n        this._accessToken = '';\r\n        this.uri = normalizeUrl(params.uri);\r\n        if (params.streamingApiUrl) {\r\n            this.streamingApiUrl = params.streamingApiUrl;\r\n        }\r\n        if (params.version) {\r\n            this.version = params.version;\r\n        }\r\n        if (params.accessToken) {\r\n            this.accessToken = params.accessToken;\r\n        }\r\n    }\r\n    Object.defineProperty(Gateway.prototype, \"uri\", {\r\n        /** Getter for this._uri */\r\n        get: function () {\r\n            return this._uri;\r\n        },\r\n        /** Setter for this._uri */\r\n        set: function (newUri) {\r\n            this._uri = normalizeUrl(newUri);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Gateway.prototype, \"version\", {\r\n        /** Getter for this._version  */\r\n        get: function () {\r\n            return this._version;\r\n        },\r\n        /** Setter for this._version */\r\n        set: function (newVersion) {\r\n            this._version = newVersion;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Gateway.prototype, \"streamingApiUrl\", {\r\n        /** Getter for this._streamingApiUrl */\r\n        get: function () {\r\n            return this._streamingApiUrl;\r\n        },\r\n        /** Setter for this._streamingApiUrl */\r\n        set: function (newStreamingApiUrl) {\r\n            this._streamingApiUrl = normalizeUrl(newStreamingApiUrl);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Gateway.prototype, \"accessToken\", {\r\n        /** Getter for this._accessToken */\r\n        get: function () {\r\n            return this._accessToken;\r\n        },\r\n        /** Setter for this._accessToken */\r\n        set: function (newAccessToken) {\r\n            this._accessToken = newAccessToken;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Transform JSON to JS object\r\n     * @param response Response object\r\n     * @return Parsed entitiy\r\n     */\r\n    Gateway.prototype.transformResponse = function (response) {\r\n        try {\r\n            return JSON.parse(response);\r\n        }\r\n        catch (_a) {\r\n            return response;\r\n        }\r\n    };\r\n    /**\r\n     * Encode data in request options and add authorization / content-type header\r\n     * @param data Any data\r\n     * @param options Axios options\r\n     */\r\n    Gateway.prototype.decorateRequestConfig = function (data, options) {\r\n        if (options === void 0) { options = {}; }\r\n        options.transformResponse = [this.transformResponse];\r\n        if (!options.headers) {\r\n            options.headers = {};\r\n        }\r\n        // Set `application/json` as the default\r\n        if (!options.headers['Content-Type']) {\r\n            options.headers['Content-Type'] = 'application/json';\r\n        }\r\n        // Add oauth header\r\n        if (this.accessToken) {\r\n            options.headers.Authorization = \"Bearer \" + this.accessToken;\r\n        }\r\n        switch (options.headers['Content-Type']) {\r\n            case 'application/json':\r\n                options.data = JSON.stringify(data);\r\n                return options;\r\n            case 'multipart/form-data':\r\n                var formData = new FormData();\r\n                for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {\r\n                    var _b = _a[_i], key = _b[0], value = _b[1];\r\n                    formData.append(key, value);\r\n                }\r\n                options.data = formData;\r\n                // In Node.js, axios doesn't set boundary data in the content-type header\r\n                // so set it manually by using getHeaders of `form-data` node.js package\r\n                if (typeof formData.getHeaders === 'function') {\r\n                    options.headers = tslib_1.__assign({}, options.headers, formData.getHeaders());\r\n                }\r\n                return options;\r\n            default:\r\n                return options;\r\n        }\r\n    };\r\n    /**\r\n     * Wrapper function for Axios\r\n     * @param options Axios options\r\n     * @param parse Whether parse response before return\r\n     * @return Parsed response object\r\n     */\r\n    Gateway.prototype.request = function (options) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var error_1, status_1, errorMessage;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, axios.request(options)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                    case 2:\r\n                        error_1 = _a.sent();\r\n                        if (isAxiosError(error_1)) {\r\n                            status_1 = oc(error_1).response.status();\r\n                            errorMessage = oc(error_1).response.data({\r\n                                error: 'Unexpected error',\r\n                            }).error;\r\n                            switch (status_1) {\r\n                                case 401:\r\n                                    throw new MastoUnauthorizedError(errorMessage);\r\n                                case 404:\r\n                                    throw new MastoNotFoundError(errorMessage);\r\n                                case 429:\r\n                                    throw new MastoRateLimitError(errorMessage);\r\n                                default:\r\n                                    throw error_1;\r\n                            }\r\n                        }\r\n                        throw error_1;\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * HTTP GET\r\n     * @param url URL to request\r\n     * @param params Query strings\r\n     * @param options Fetch API options\r\n     * @param parse Whether parse response before return\r\n     */\r\n    Gateway.prototype.get = function (url, params, options) {\r\n        if (params === void 0) { params = {}; }\r\n        return this.request(tslib_1.__assign({ method: 'GET', url: url,\r\n            params: params }, options, this.decorateRequestConfig({}, options)));\r\n    };\r\n    /**\r\n     * HTTP POST\r\n     * @param url URL to request\r\n     * @param data Payload\r\n     * @param options Fetch API options\r\n     * @param parse Whether parse response before return\r\n     */\r\n    Gateway.prototype.post = function (url, data, options) {\r\n        if (data === void 0) { data = {}; }\r\n        return this.request(tslib_1.__assign({ method: 'POST', url: url }, options, this.decorateRequestConfig(data, options)));\r\n    };\r\n    /**\r\n     * HTTP PUT\r\n     * @param url URL to request\r\n     * @param data Payload\r\n     * @param options Fetch API options\r\n     * @param parse Whether parse response before return\r\n     */\r\n    Gateway.prototype.put = function (url, data, options) {\r\n        if (data === void 0) { data = {}; }\r\n        return this.request(tslib_1.__assign({ method: 'PUT', url: url }, options, this.decorateRequestConfig(data, options)));\r\n    };\r\n    /**\r\n     * HTTP DELETE\r\n     * @param url URL to request\r\n     * @param data jPayload\r\n     * @param options Fetch API options\r\n     * @param parse Whether parse response before return\r\n     */\r\n    Gateway.prototype.delete = function (url, data, options) {\r\n        if (data === void 0) { data = {}; }\r\n        return this.request(tslib_1.__assign({ method: 'DELETE', url: url }, options, this.decorateRequestConfig(data, options)));\r\n    };\r\n    /**\r\n     * HTTP PATCH\r\n     * @param url URL to request\r\n     * @param data Payload\r\n     * @param options Fetch API options\r\n     * @param parse Whether parse response before return\r\n     */\r\n    Gateway.prototype.patch = function (url, data, options) {\r\n        if (data === void 0) { data = {}; }\r\n        return this.request(tslib_1.__assign({ method: 'PATCH', url: url }, options, this.decorateRequestConfig(data, options)));\r\n    };\r\n    /**\r\n     * Connect to a streaming\r\n     * @param id ID of the channel, e.g. `public`, `user`, `public:local`\r\n     * @return Instance of EventEmitter\r\n     */\r\n    Gateway.prototype.stream = function (url, params) {\r\n        if (params === void 0) { params = {}; }\r\n        if (this.accessToken) {\r\n            params.access_token = this.accessToken;\r\n        }\r\n        return new MastoEvents().connect(url +\r\n            (Object.keys(params).length ? \"?\" + querystring.stringify(params) : ''));\r\n    };\r\n    /**\r\n     * Generate an iterable of the pagination.\r\n     * The default generator implementation of JS cannot change the value of `done` depend on the result of yield,\r\n     * Therefore we define custom generator to reproduce Mastodon's link header behaviour faithfully.\r\n     * @param initialUrl URL for the endpoint\r\n     * @param initialParams Query parameter\r\n     * @return Async iterable iterator of the pages.\r\n     * See also [MDN article about generator/iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\r\n     */\r\n    Gateway.prototype.paginate = function (initialUrl, initialParams) {\r\n        var _a;\r\n        // tslint:disable-next-line no-this-assignment\r\n        var _this = this;\r\n        var url = initialUrl;\r\n        var params = initialParams;\r\n        return _a = {\r\n                next: function (options) {\r\n                    if (options === void 0) { options = {}; }\r\n                    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n                        var response, link, match;\r\n                        return tslib_1.__generator(this, function (_a) {\r\n                            switch (_a.label) {\r\n                                case 0:\r\n                                    if (options.reset) {\r\n                                        url = initialUrl;\r\n                                        params = initialParams;\r\n                                    }\r\n                                    if (!url) {\r\n                                        return [2 /*return*/, { done: true, value: undefined }];\r\n                                    }\r\n                                    return [4 /*yield*/, _this.get(options.url || url, options.params || params)];\r\n                                case 1:\r\n                                    response = _a.sent();\r\n                                    link = oc(response.headers.link)('');\r\n                                    match = link.match(/<(.+?)>; rel=\"next\"/);\r\n                                    url = (match && match.length && match[1]) || '';\r\n                                    params = undefined;\r\n                                    // Return `done: true` immediately if no next url returned\r\n                                    return [2 /*return*/, { done: !url, value: response }];\r\n                            }\r\n                        });\r\n                    });\r\n                },\r\n                return: function (value) {\r\n                    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n                        return tslib_1.__generator(this, function (_a) {\r\n                            return [2 /*return*/, { value: value, done: true }];\r\n                        });\r\n                    });\r\n                },\r\n                throw: function (error) {\r\n                    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n                        return tslib_1.__generator(this, function (_a) {\r\n                            throw error;\r\n                        });\r\n                    });\r\n                }\r\n            },\r\n            _a[Symbol.asyncIterator] = function () {\r\n                return this;\r\n            },\r\n            _a;\r\n    };\r\n    return Gateway;\r\n}());\r\nexport { Gateway };\r\n","dts":{"name":"/Users/nucx/Developments/masto.js/client/gateway.d.ts","writeByteOrderMark":false,"text":"import { AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport 'isomorphic-form-data';\r\nimport { MastoEvents } from './masto-events';\r\nexport declare type PaginateNextOptions<Params> = {\r\n    /** Reset pagination */\r\n    reset?: boolean;\r\n    /** URL */\r\n    url?: string;\r\n    /** Query parameters */\r\n    params?: Params;\r\n};\r\nexport interface GatewayConstructor {\r\n    /** URI of the instance */\r\n    uri: string;\r\n    /** Streaming API URL */\r\n    streamingApiUrl?: string;\r\n    /** Version of the instance */\r\n    version?: string;\r\n    /** Access token of the user */\r\n    accessToken?: string;\r\n}\r\n/**\r\n * Mastodon network request wrapper\r\n * @param params Optional params\r\n */\r\nexport declare class Gateway {\r\n    /** URI of the instance */\r\n    private _uri;\r\n    /** Streaming API URL of the instance */\r\n    private _streamingApiUrl;\r\n    /** Version of the current instance */\r\n    private _version;\r\n    /** API token of the user */\r\n    private _accessToken;\r\n    constructor(params: GatewayConstructor);\r\n    /** Getter for this._uri */\r\n    /** Setter for this._uri */\r\n    uri: string;\r\n    /** Getter for this._version  */\r\n    /** Setter for this._version */\r\n    version: string;\r\n    /** Getter for this._streamingApiUrl */\r\n    /** Setter for this._streamingApiUrl */\r\n    streamingApiUrl: string;\r\n    /** Getter for this._accessToken */\r\n    /** Setter for this._accessToken */\r\n    accessToken: string;\r\n    /**\r\n     * Transform JSON to JS object\r\n     * @param response Response object\r\n     * @return Parsed entitiy\r\n     */\r\n    private transformResponse;\r\n    /**\r\n     * Encode data in request options and add authorization / content-type header\r\n     * @param data Any data\r\n     * @param options Axios options\r\n     */\r\n    private decorateRequestConfig;\r\n    /**\r\n     * Wrapper function for Axios\r\n     * @param options Axios options\r\n     * @param parse Whether parse response before return\r\n     * @return Parsed response object\r\n     */\r\n    protected request<T>(options: AxiosRequestConfig): Promise<AxiosResponse<T>>;\r\n    /**\r\n     * HTTP GET\r\n     * @param url URL to request\r\n     * @param params Query strings\r\n     * @param options Fetch API options\r\n     * @param parse Whether parse response before return\r\n     */\r\n    get<T>(url: string, params?: {\r\n        [key: string]: any;\r\n    }, options?: AxiosRequestConfig): Promise<AxiosResponse<T>>;\r\n    /**\r\n     * HTTP POST\r\n     * @param url URL to request\r\n     * @param data Payload\r\n     * @param options Fetch API options\r\n     * @param parse Whether parse response before return\r\n     */\r\n    post<T>(url: string, data?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<T>>;\r\n    /**\r\n     * HTTP PUT\r\n     * @param url URL to request\r\n     * @param data Payload\r\n     * @param options Fetch API options\r\n     * @param parse Whether parse response before return\r\n     */\r\n    put<T>(url: string, data?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<T>>;\r\n    /**\r\n     * HTTP DELETE\r\n     * @param url URL to request\r\n     * @param data jPayload\r\n     * @param options Fetch API options\r\n     * @param parse Whether parse response before return\r\n     */\r\n    delete<T>(url: string, data?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<T>>;\r\n    /**\r\n     * HTTP PATCH\r\n     * @param url URL to request\r\n     * @param data Payload\r\n     * @param options Fetch API options\r\n     * @param parse Whether parse response before return\r\n     */\r\n    patch<T>(url: string, data?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<T>>;\r\n    /**\r\n     * Connect to a streaming\r\n     * @param id ID of the channel, e.g. `public`, `user`, `public:local`\r\n     * @return Instance of EventEmitter\r\n     */\r\n    stream(url: string, params?: {\r\n        [key: string]: any;\r\n    }): Promise<MastoEvents>;\r\n    /**\r\n     * Generate an iterable of the pagination.\r\n     * The default generator implementation of JS cannot change the value of `done` depend on the result of yield,\r\n     * Therefore we define custom generator to reproduce Mastodon's link header behaviour faithfully.\r\n     * @param initialUrl URL for the endpoint\r\n     * @param initialParams Query parameter\r\n     * @return Async iterable iterator of the pages.\r\n     * See also [MDN article about generator/iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\r\n     */\r\n    paginate<Data, Params = any>(initialUrl: string, initialParams?: Params): AsyncIterableIterator<AxiosResponse<Data> | undefined>;\r\n}\r\n"}}
