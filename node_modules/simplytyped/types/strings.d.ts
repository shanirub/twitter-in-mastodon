import { True, False, And } from './conditionals';
import { IsNever } from './predicates';
export declare type DropString<T extends string, U extends T> = Exclude<T, U>;
export declare type StringEqual<T extends string, U extends string> = And<IsNever<Exclude<T, U>>, IsNever<Exclude<U, T>>>;
export declare type UnionContains<T, U> = U extends T ? True : False;
