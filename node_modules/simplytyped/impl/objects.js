"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Type guard for any key, `k`.
 * Marks `k` as a key of `T` if `k` is in `obj`.
 * @param obj object to query for key `k`
 * @param k key to check existence in `obj`
 */
function isKeyOf(obj, k) {
    return k in obj;
}
exports.isKeyOf = isKeyOf;
/**
 * Same as `Object.keys` except that the returned type is an array of keys of the object.
 * Note that for the same reason that `Object.keys` does not do this natively, this method _is not safe_ for objects on the perimeter of your code (user input, read in files, network requests etc.).
 * @param obj object whose keys will be returned
 * @returns an array of keys from `obj`
 */
function objectKeys(obj) {
    return Object.keys(obj);
}
exports.objectKeys = objectKeys;
/**
 * Useful for marking object literals as readonly while still keeping type inference:
 * `const obj = Readonly({ a: 22, b: 'yellow' });`
 * @param obj an object to be marked readonly
 * @returns `obj` marked as readonly at compile time
 */
function Readonly(obj) { return obj; }
exports.Readonly = Readonly;
/**
 * Useful for tagged unions of objects (imagine redux reducers) this tags every sub-object with the key pointing to that sub-object.
 * @param obj an object of objects whose keys will be used as tags for the inner objects
 * @param key the name of the "tag" parameter
 * @returns `obj` with the inner objects tagged with parameter `key` and the key pointing to that inner object
 */
function taggedObject(obj, key) {
    var keys = objectKeys(obj);
    return keys.reduce(function (collection, k) {
        var _a;
        var inner = obj[k];
        collection[k] = __assign((_a = {}, _a[key] = k, _a), inner);
        return collection;
    }, {});
}
exports.taggedObject = taggedObject;
